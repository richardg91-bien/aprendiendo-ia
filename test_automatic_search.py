#!/usr/bin/env python3
"""
üåê PRUEBA DE B√öSQUEDA AUTOM√ÅTICA MEJORADA
=======================================

Script para probar la nueva funcionalidad de b√∫squeda autom√°tica de ARIA
"""

import requests
import json
import time

def test_automatic_search():
    """Probar b√∫squeda autom√°tica con diferentes tipos de preguntas"""
    
    base_url = "http://localhost:5000/api/chat/futuristic"
    
    test_questions = [
        "que es el amor",
        "qu√© es la felicidad",
        "explica la inteligencia artificial",
        "h√°blame del universo",
        "dime sobre la amistad",
        "que es python",
        "define machine learning",
        "que es la vida",
        "explica la tecnolog√≠a",
        "que es la consciencia"
    ]
    
    print("üåê PROBANDO B√öSQUEDA AUTOM√ÅTICA DE ARIA")
    print("=" * 60)
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. Pregunta: '{question}'")
        print("-" * 40)
        
        try:
            response = requests.post(base_url, json={
                'message': question,
                'emotion_context': 'neutral'
            }, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    response_text = data['response']
                    
                    # Verificar si us√≥ b√∫squeda autom√°tica
                    if "üåê" in response_text or "informaci√≥n actualizada" in response_text.lower():
                        print("   ‚úÖ B√öSQUEDA AUTOM√ÅTICA ACTIVADA")
                    else:
                        print("   üìö Respuesta desde conocimiento base")
                    
                    # Mostrar respuesta truncada
                    if len(response_text) > 200:
                        print(f"   üí¨ ARIA: {response_text[:200]}...")
                    else:
                        print(f"   üí¨ ARIA: {response_text}")
                    
                    # Informaci√≥n emocional
                    emotion = data.get('emotion', 'No detectada')
                    print(f"   üé≠ Emoci√≥n: {emotion}")
                    
                    # Confianza
                    confidence = data.get('confidence', 0)
                    print(f"   üìä Confianza: {confidence:.2f}")
                    
                else:
                    print(f"   ‚ùå Error: {data.get('error', 'Error desconocido')}")
            else:
                print(f"   ‚ùå Error HTTP: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print(f"   ‚ùå No se puede conectar al servidor")
            break
        except requests.exceptions.Timeout:
            print(f"   ‚è∞ Timeout - b√∫squeda tom√≥ demasiado tiempo")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
        
        # Pausa entre requests
        time.sleep(2)
    
    print("\n" + "=" * 60)
    print("‚úÖ Prueba de b√∫squeda autom√°tica completada")

if __name__ == "__main__":
    test_automatic_search()