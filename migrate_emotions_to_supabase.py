#!/usr/bin/env python3
"""
üé≠ MIGRACI√ìN DEL SISTEMA EMOCIONAL A SUPABASE
===========================================

Migra toda la informaci√≥n del sistema de emociones de ARIA a Supabase
"""

import json
import sys
import os
from datetime import datetime
from typing import Dict, List

# Importar sistema de emociones
try:
    from emotion_detector import EmotionDetector
    EMOTION_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è No se pudo importar sistema de emociones: {e}")
    EMOTION_AVAILABLE = False

# Importar conector sin inicializar servidor
try:
    import os
    from supabase import create_client, Client
    from dotenv import load_dotenv
    
    # Cargar variables de entorno
    load_dotenv("backend/.env")
    
    # Configuraci√≥n de Supabase
    SUPABASE_URL = os.getenv('SUPABASE_URL')
    SUPABASE_KEY = os.getenv('SUPABASE_ANON_KEY')
    
    if SUPABASE_URL and SUPABASE_KEY:
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        SUPABASE_AVAILABLE = True
    else:
        SUPABASE_AVAILABLE = False
        print("‚ùå Variables de Supabase no encontradas")
        
except ImportError as e:
    print(f"‚ö†Ô∏è No se pudo importar Supabase: {e}")
    SUPABASE_AVAILABLE = False

def store_knowledge_direct(concept: str, description: str, category: str = "general", confidence: float = 0.8):
    """Almacenar conocimiento directamente en Supabase"""
    try:
        data = {
            "concept": concept,
            "description": description,
            "category": category,
            "confidence": confidence
        }
        
        result = supabase.table("aria_knowledge").insert(data).execute()
        return len(result.data) > 0
    except Exception as e:
        print(f"Error almacenando en Supabase: {e}")
        return False

def search_knowledge_direct(query: str):
    """Buscar conocimiento directamente en Supabase"""
    try:
        result = supabase.table("aria_knowledge").select("*").ilike("concept", f"%{query}%").execute()
        return result.data
    except Exception as e:
        print(f"Error buscando en Supabase: {e}")
        return []

def get_knowledge_by_category_direct(category: str):
    """Obtener conocimiento por categor√≠a directamente de Supabase"""
    try:
        result = supabase.table("aria_knowledge").select("*").eq("category", category).execute()
        return result.data
    except Exception as e:
        print(f"Error obteniendo por categor√≠a: {e}")
        return []
    """Crear tablas necesarias para el sistema emocional en Supabase"""
    
    sql_commands = [
        """
        -- Tabla para mapeo de emociones
        CREATE TABLE IF NOT EXISTS aria_emotions (
            id SERIAL PRIMARY KEY,
            emotion_key VARCHAR(50) UNIQUE NOT NULL,
            emotion_name VARCHAR(100) NOT NULL,
            aria_emotion VARCHAR(50) NOT NULL,
            color_hex VARCHAR(7) NOT NULL,
            color_rgb VARCHAR(15) NOT NULL,
            category VARCHAR(50) DEFAULT 'basic',
            description TEXT,
            confidence_threshold FLOAT DEFAULT 0.5,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        """,
        
        """
        -- Tabla para hist√≥rico de emociones detectadas
        CREATE TABLE IF NOT EXISTS aria_emotion_history (
            id SERIAL PRIMARY KEY,
            conversation_id INTEGER REFERENCES aria_conversations(id),
            emotion_detected VARCHAR(50) NOT NULL,
            emotion_confidence FLOAT DEFAULT 0.5,
            emotion_provider VARCHAR(50) DEFAULT 'fallback',
            user_text TEXT,
            aria_response_emotion VARCHAR(50),
            color_used VARCHAR(7),
            context_type VARCHAR(20) DEFAULT 'user',
            timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            raw_data JSONB DEFAULT '{}'::jsonb
        );
        """,
        
        """
        -- Tabla para configuraci√≥n emocional
        CREATE TABLE IF NOT EXISTS aria_emotion_config (
            id SERIAL PRIMARY KEY,
            config_key VARCHAR(100) UNIQUE NOT NULL,
            config_value JSONB NOT NULL,
            description TEXT,
            active BOOLEAN DEFAULT true,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        """,
        
        """
        -- √çndices para mejorar rendimiento
        CREATE INDEX IF NOT EXISTS idx_emotion_history_conversation 
        ON aria_emotion_history(conversation_id);
        
        CREATE INDEX IF NOT EXISTS idx_emotion_history_timestamp 
        ON aria_emotion_history(timestamp);
        
        CREATE INDEX IF NOT EXISTS idx_emotions_key 
        ON aria_emotions(emotion_key);
        """
    ]
    
    return sql_commands

def create_emotion_tables():
    """Obtener todos los mapeos de emociones del sistema actual"""
    
    if not EMOTION_AVAILABLE:
        print("‚ùå Sistema de emociones no disponible")
        return {}
    
    # Crear detector temporal para obtener mapeos
    detector = EmotionDetector("")  # Sin API key para obtener solo mapeos
    
    return detector.emotion_colors

def get_emotion_mappings() -> Dict:
    """Obtener todos los mapeos de emociones del sistema actual"""
    
    if not EMOTION_AVAILABLE:
        print("‚ùå Sistema de emociones no disponible")
        return {}
    
    # Crear detector temporal para obtener mapeos
    detector = EmotionDetector("")  # Sin API key para obtener solo mapeos
    
    return detector.emotion_colors

def migrate_emotion_system():
    """Migrar todo el sistema emocional a Supabase"""
    
    print("üé≠ MIGRANDO SISTEMA EMOCIONAL A SUPABASE")
    print("=" * 50)
    
    # Inicializar conexi√≥n a Supabase
    print("üîó Conectando a Supabase...")
    if not SUPABASE_AVAILABLE:
        print("‚ùå Supabase no disponible")
        return False
    print("‚úÖ Conectado a Supabase")
    
    # Crear tablas necesarias
    print("üèóÔ∏è Creando tablas de emociones...")
    sql_commands = create_emotion_tables()
    
    for i, sql in enumerate(sql_commands):
        try:
            print(f"   üìù Ejecutando comando {i+1}/{len(sql_commands)}")
            # Nota: Necesitaremos ejecutar estos SQL manualmente en Supabase
            # o crear una funci√≥n que los ejecute
        except Exception as e:
            print(f"   ‚ùå Error en comando {i+1}: {e}")
    
    # Migrar mapeos de emociones
    print("üé® Migrando mapeos de emociones...")
    emotion_mappings = get_emotion_mappings()
    
    if not emotion_mappings:
        print("‚ùå No se pudieron obtener mapeos de emociones")
        return False
    
    migrated_count = 0
    for emotion_key, emotion_data in emotion_mappings.items():
        try:
            # Preparar datos para Supabase
            emotion_record = {
                'concept': f"emotion_{emotion_key}",
                'description': json.dumps({
                    'emotion_key': emotion_key,
                    'emotion_name': emotion_data['name'],
                    'aria_emotion': emotion_data['aria_emotion'],
                    'color_hex': emotion_data['color'],
                    'color_rgb': emotion_data['rgb'],
                    'category': 'emotion_mapping',
                    'type': 'emotion_system'
                }),
                'category': 'emotion_mapping',
                'confidence': 1.0  # Mapeos de emociones tienen confianza m√°xima
            }
            
            # Almacenar en tabla de conocimiento
            result = store_knowledge_direct(
                concept=emotion_record['concept'],
                description=emotion_record['description'],
                category=emotion_record['category'],
                confidence=emotion_record['confidence']
            )
            
            if result:
                print(f"   ‚úÖ Migrada emoci√≥n: {emotion_key} ‚Üí {emotion_data['name']}")
                migrated_count += 1
            else:
                print(f"   ‚ö†Ô∏è Ya existe: {emotion_key}")
                
        except Exception as e:
            print(f"   ‚ùå Error migrando {emotion_key}: {e}")
    
    # Migrar configuraci√≥n emocional
    print("‚öôÔ∏è Migrando configuraci√≥n emocional...")
    
    emotion_config = {
        'edenai_providers': ['vernai'],
        'fallback_enabled': True,
        'confidence_threshold': 0.5,
        'default_emotion': 'neutral',
        'emotion_persistence': True,
        'color_system_enabled': True
    }
    
    try:
        config_record = {
            'concept': 'emotion_system_config',
            'description': json.dumps(emotion_config),
            'category': 'system_config',
            'confidence': 1.0
        }
        
        result = store_knowledge_direct(
            concept=config_record['concept'],
            description=config_record['description'],
            category=config_record['category'],
            confidence=config_record['confidence']
        )
        
        if result:
            print("   ‚úÖ Configuraci√≥n emocional migrada")
        else:
            print("   ‚ö†Ô∏è Configuraci√≥n ya exist√≠a")
            
    except Exception as e:
        print(f"   ‚ùå Error migrando configuraci√≥n: {e}")
    
    # Verificar migraci√≥n
    print("üîç Verificando migraci√≥n...")
    try:
        emotion_knowledge = get_knowledge_by_category_direct('emotion_mapping')
        config_knowledge = get_knowledge_by_category_direct('system_config')
        
        print(f"   üìä Emociones migradas: {len(emotion_knowledge) if emotion_knowledge else 0}")
        print(f"   ‚öôÔ∏è Configuraciones migradas: {len(config_knowledge) if config_knowledge else 0}")
        
    except Exception as e:
        print(f"   ‚ùå Error verificando: {e}")
    
    print("\nüìä RESUMEN DE MIGRACI√ìN EMOCIONAL:")
    print(f"   ‚úÖ Emociones migradas: {migrated_count}")
    print(f"   üìà Total disponible: {len(emotion_mappings)}")
    print(f"   üéØ √âxito: {migrated_count == len(emotion_mappings)}")
    
    print("\nüîß PR√ìXIMOS PASOS:")
    print("   1. Ejecutar SQL de creaci√≥n de tablas en Supabase manualmente")
    print("   2. Verificar que las emociones est√°n disponibles")
    print("   3. Probar sistema emocional con Supabase")
    print("   4. Actualizar servidor para usar emociones de Supabase")
    
    return migrated_count > 0

def test_emotion_retrieval():
    """Probar recuperaci√≥n de emociones desde Supabase"""
    
    print("\nüß™ PROBANDO RECUPERACI√ìN DE EMOCIONES")
    print("=" * 40)
    
    try:
        # Buscar emociones espec√≠ficas
        test_emotions = ['joy', 'sadness', 'anger', 'neutral']
        
        for emotion in test_emotions:
            emotion_key = f"emotion_{emotion}"
            result = search_knowledge_direct(emotion_key)
            
            if result:
                print(f"   ‚úÖ {emotion}: Encontrada")
                # Mostrar datos de la emoci√≥n
                if len(result) > 0:
                    emotion_data = json.loads(result[0].get('description', '{}'))
                    color = emotion_data.get('color_hex', 'N/A')
                    name = emotion_data.get('emotion_name', 'N/A')
                    print(f"      üé® Color: {color} | Nombre: {name}")
            else:
                print(f"   ‚ùå {emotion}: No encontrada")
                
    except Exception as e:
        print(f"‚ùå Error probando recuperaci√≥n: {e}")

if __name__ == "__main__":
    print("üöÄ CONFIGURACI√ìN SISTEMA EMOCIONAL EN SUPABASE")
    print("=" * 60)
    
    success = migrate_emotion_system()
    
    if success:
        test_emotion_retrieval()
        print("\nüéâ MIGRACI√ìN EMOCIONAL COMPLETADA")
        print("üîÑ Reinicia el servidor ARIA para usar el sistema emocional en la nube")
    else:
        print("\n‚ùå ERROR EN MIGRACI√ìN EMOCIONAL")
        print("üîß Revisa la configuraci√≥n de Supabase")