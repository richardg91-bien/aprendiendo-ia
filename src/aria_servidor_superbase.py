#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ ARIA - Servidor con Super Base Integration
============================================

Servidor ARIA mejorado con integraci√≥n completa de Super Base
para almacenamiento persistente de conocimiento y relaciones APIs.

Caracter√≠sticas:
‚úÖ Integraci√≥n completa con Supabase
‚úÖ Almacenamiento persistente de conversaciones
‚úÖ Gesti√≥n de conocimiento con base de datos
‚úÖ Relaciones inteligentes con APIs externas
‚úÖ Sistema de aprendizaje continuo
‚úÖ Interfaz moderna con React

Fecha: 22 de octubre de 2025
"""

import sys
import os

# Agregar directorios al path para imports relativos
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, current_dir)
sys.path.insert(0, parent_dir)

from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import json
import time
import uuid
from datetime import datetime, timezone
import logging
import re
from typing import Dict, List, Optional, Any

# Importar Super Base
try:
    from aria_superbase import aria_superbase, ARIASuperBase
    SUPERBASE_AVAILABLE = True
    print("üóÑÔ∏è ARIA Super Base cargado")
except ImportError as e:
    SUPERBASE_AVAILABLE = False
    print(f"‚ùå Super Base no disponible: {e}")

# Importar sistema de embeddings con Supabase
try:
    from core.aria_embeddings_supabase import ARIAEmbeddingsSupabase, crear_embedding_system
    EMBEDDINGS_AVAILABLE = True
    print("üß† Sistema de embeddings Supabase cargado")
except ImportError as e:
    EMBEDDINGS_AVAILABLE = False
    print(f"‚ùå Sistema de embeddings no disponible: {e}")

# Importar sistemas de ARIA existentes
try:
    # ‚úÖ Sistema de aprendizaje ACTIVADO con APIs espa√±olas controladas
    # Ahora usa el sistema de embeddings + APIs espa√±olas para aprendizaje inteligente
    LEARNING_SYSTEM_AVAILABLE = True
    print("‚úÖ Sistema de aprendizaje activado con control inteligente")
    print("üìö Funciones: Embeddings + APIs espa√±olas + An√°lisis de patrones")
except ImportError as e:
    LEARNING_SYSTEM_AVAILABLE = False
    print(f"‚ö†Ô∏è Sistema de aprendizaje no disponible: {e}")

# Importar sistema emocional con Supabase
try:
    from core.emotion_detector_supabase import (
        init_emotion_detector_supabase,
        detect_user_emotion_supabase,
        detect_aria_emotion_supabase,
        get_emotion_stats_supabase
    )
    EMOTION_SUPABASE_AVAILABLE = True
    print("üé≠ Sistema emocional Supabase cargado")
except ImportError as e:
    EMOTION_SUPABASE_AVAILABLE = False
    print(f"‚ö†Ô∏è Sistema emocional Supabase no disponible: {e}")
    
    # Fallback al sistema emocional original (legacy)
    try:
        from legacy_backup.emotion_detector import init_emotion_detector, detect_user_emotion, detect_aria_emotion
        EMOTION_LEGACY_AVAILABLE = True
        print("üé≠ Sistema emocional legacy cargado")
    except ImportError as e2:
        EMOTION_LEGACY_AVAILABLE = False
        print(f"‚ö†Ô∏è Sistema emocional legacy no disponible: {e2}")

# Determinar qu√© sistema emocional usar
if EMOTION_SUPABASE_AVAILABLE:
    EMOTION_SYSTEM = "supabase"
    print("‚úÖ Usando sistema emocional Supabase")
elif EMOTION_LEGACY_AVAILABLE:
    EMOTION_SYSTEM = "legacy"
    print("‚úÖ Usando sistema emocional legacy")
else:
    EMOTION_SYSTEM = "none"
    print("‚ùå Sin sistema emocional disponible")

try:
    # Sistema de APIs espa√±olas activado
    from spanish_apis import aria_spanish_apis
    SPANISH_APIS_AVAILABLE = True
    print("üá™ÔøΩ APIs espa√±olas cargadas y activas")
except ImportError:
    SPANISH_APIS_AVAILABLE = False
    print("‚ö†Ô∏è APIs en espa√±ol no disponibles")

# Configurar Flask
app = Flask(__name__, 
           template_folder='../frontend/public',
           static_folder='../frontend/build/static')
CORS(app)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ARIASuperServer:
    """Servidor ARIA con Super Base - La evoluci√≥n definitiva"""
    
    def __init__(self):
        self.session_id = str(uuid.uuid4())
        self.conversation_count = 0
        self.start_time = datetime.now(timezone.utc)
        
        # Sistema emocional con Supabase
        self.emotion_detector = None
        self.emotion_system_type = EMOTION_SYSTEM
        
        if EMOTION_SYSTEM == "supabase":
            try:
                # Obtener API key de EdenAI si est√° disponible
                eden_api_key = os.getenv('EDENAI_API_KEY', '')
                self.emotion_detector = init_emotion_detector_supabase(eden_api_key)
                print("‚úÖ Sistema emocional Supabase inicializado")
            except Exception as e:
                print(f"‚ö†Ô∏è Error inicializando emociones Supabase: {e}")
                self.emotion_system_type = "basic"
        elif EMOTION_SYSTEM == "legacy":
            try:
                # Usar sistema emocional legacy
                eden_api_key = os.getenv('EDENAI_API_KEY', '')
                if eden_api_key:
                    init_emotion_detector(eden_api_key)
                print("‚úÖ Sistema emocional legacy inicializado")
            except Exception as e:
                print(f"‚ö†Ô∏è Error inicializando emociones legacy: {e}")
                self.emotion_system_type = "basic"
        else:
            self.emotion_system_type = "basic"
            print("üì¶ Usando sistema emocional b√°sico")
        
        # Sistema de emociones mejorado (mantenido para compatibilidad)
        self.emotions = {
            'happiness': 0.7,
            'curiosity': 0.8,
            'confidence': 0.6,
            'empathy': 0.9,
            'excitement': 0.5
        }
        
        self.current_emotion = 'curious'
        
        # Configuraci√≥n de usuario
        self.user_preferences = {
            'language': 'auto',
            'response_style': 'educational',
            'detail_level': 'medium',
            'personality': 'friendly',
            'use_superbase': SUPERBASE_AVAILABLE
        }
        
        # Cache local para rendimiento - DEBE estar antes de _initialize_superbase()
        self.knowledge_cache = {}
        self.api_cache = {}
        
        # Inicializar Super Base si est√° disponible
        if SUPERBASE_AVAILABLE:
            self.superbase = aria_superbase
            self._initialize_superbase()
        else:
            self.superbase = None
            print("üìù Usando almacenamiento en memoria")
        
        # Inicializar sistema de embeddings si est√° disponible
        if EMBEDDINGS_AVAILABLE:
            try:
                self.embeddings_system = crear_embedding_system()
                if self.embeddings_system:
                    print("üß† Sistema de embeddings Supabase inicializado")
                else:
                    print("‚ö†Ô∏è No se pudo inicializar sistema de embeddings")
                    self.embeddings_system = None
            except Exception as e:
                print(f"‚ö†Ô∏è Error inicializando embeddings: {e}")
                self.embeddings_system = None
        else:
            self.embeddings_system = None
            print("üìù Sistema de embeddings no disponible")
        
        print(f"üöÄ ARIA Super Server inicializado - Sesi√≥n: {self.session_id[:8]}")
    
    def _initialize_superbase(self):
        """Inicializar Super Base con datos de sesi√≥n"""
        try:
            # Registrar inicio de sesi√≥n
            session_data = {
                'topic': 'aria_session_start',
                'source_type': 'system_initialization',
                'knowledge_gained': 0,
                'apis_discovered': 0,
                'session_duration': 0,
                'success_indicators': {
                    'session_id': self.session_id,
                    'start_time': self.start_time.isoformat(),
                    'superbase_enabled': True
                }
            }
            
            # Registrar en tabla de learning_sessions
            # self.superbase.store_learning_session(**session_data)
            
            print("‚úÖ Super Base inicializado para la sesi√≥n")
            
            # Cargar conocimiento existente en cache
            self._load_knowledge_cache()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error inicializando Super Base: {e}")
    
    def _load_knowledge_cache(self):
        """Cargar conocimiento frecuente en cache"""
        try:
            if not self.superbase:
                return
                
            # Cargar conceptos m√°s confiables
            knowledge = self.superbase.get_knowledge()
            for item in knowledge[:50]:  # Top 50
                concept = item.get('concept', '')
                self.knowledge_cache[concept] = item
            
            print(f"üìö Cache cargado con {len(self.knowledge_cache)} conceptos")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error cargando cache: {e}")
    
    def process_message(self, user_message: str, context: Dict = None) -> Dict[str, Any]:
        """Procesar mensaje del usuario con integraci√≥n Super Base"""
        start_time = time.time()
        self.conversation_count += 1
        
        try:
            # Detectar idioma
            language = self._detect_language(user_message)
            
            # Buscar conocimiento relevante
            relevant_knowledge = self._search_knowledge(user_message)
            
            # Generar respuesta inteligente
            response_data = self._generate_intelligent_response(
                user_message, relevant_knowledge, language
            )
            
            # Actualizar emociones
            self._update_emotions(user_message, response_data)
            
            # Almacenar conversaci√≥n en Super Base
            if self.superbase:
                self._store_conversation(user_message, response_data)
            
            # Aprender de la conversaci√≥n
            self._learn_from_conversation(user_message, response_data)
            
            # Preparar respuesta completa
            response_time = time.time() - start_time
            
            final_response = {
                'response': response_data['response'],
                'emotion': self.current_emotion,
                'confidence': response_data.get('confidence', 0.8),
                'knowledge_used': relevant_knowledge[:3],  # Top 3
                'apis_called': response_data.get('apis_used', []),
                'language_detected': language,
                'response_time': round(response_time, 3),
                'conversation_count': self.conversation_count,
                'session_id': self.session_id[:8],
                'superbase_enabled': self.superbase is not None,
                'learning_insights': response_data.get('learning_insights', []),
                'suggested_topics': self._get_suggested_topics(user_message)
            }
            
            return final_response
            
        except Exception as e:
            logger.error(f"Error procesando mensaje: {e}")
            return self._create_error_response(str(e))
    
    def _detect_language(self, text: str) -> str:
        """Detectar idioma del texto"""
        # Palabras comunes en espa√±ol
        spanish_words = ['que', 'como', 'donde', 'cuando', 'porque', 'para', 'con', 'una', 'una', 'del', 'es', 'el', 'la', 'de', 'y', 'en']
        # Palabras comunes en ingl√©s  
        english_words = ['the', 'and', 'for', 'are', 'but', 'not', 'you', 'all', 'can', 'had', 'her', 'was', 'one', 'our', 'out', 'day']
        
        words = text.lower().split()
        spanish_count = sum(1 for word in words if word in spanish_words)
        english_count = sum(1 for word in words if word in english_words)
        
        if spanish_count > english_count:
            return 'es'
        elif english_count > spanish_count:
            return 'en'
        else:
            return 'auto'
    
    def _search_knowledge(self, query: str) -> List[Dict]:
        """Buscar conocimiento relevante usando embeddings y b√∫squeda tradicional"""
        relevant_knowledge = []
        
        try:
            # 1. Buscar usando embeddings si est√° disponible
            if self.embeddings_system:
                try:
                    # Buscar textos similares con embeddings
                    embedding_results = self.embeddings_system.buscar_similares(
                        query, limite=5, umbral_similitud=0.6
                    )
                    
                    for result in embedding_results:
                        knowledge_item = {
                            'concept': result['texto'][:50] + '...' if len(result['texto']) > 50 else result['texto'],
                            'description': result['texto'],
                            'confidence': result['similitud'],
                            'source': f"embeddings_{result['categoria']}",
                            'category': result['categoria'],
                            'metadata': result.get('metadatos', {})
                        }
                        relevant_knowledge.append(knowledge_item)
                    
                    # Buscar conocimiento estructurado
                    knowledge_results = self.embeddings_system.buscar_conocimiento(query, limite=3)
                    
                    for result in knowledge_results:
                        knowledge_item = {
                            'concept': result['concepto'],
                            'description': result['descripcion'],
                            'confidence': result['similitud'],
                            'source': 'knowledge_vectors',
                            'category': result['categoria'],
                            'tags': result.get('tags', [])
                        }
                        relevant_knowledge.append(knowledge_item)
                        
                    logger.info(f"üß† Embeddings encontr√≥ {len(embedding_results + knowledge_results)} resultados")
                    
                except Exception as e:
                    logger.error(f"Error en b√∫squeda con embeddings: {e}")
            
            # 2. Buscar en cache local (b√∫squeda tradicional)
            for concept, data in self.knowledge_cache.items():
                if any(word.lower() in concept.lower() or word.lower() in data.get('description', '').lower() 
                       for word in query.split()):
                    if data not in relevant_knowledge:  # Evitar duplicados
                        relevant_knowledge.append(data)
            
            # 3. Buscar en Super Base si est√° disponible y necesitamos m√°s resultados
            if self.superbase and len(relevant_knowledge) < 5:
                try:
                    superbase_results = self.superbase.search_knowledge(query)
                    for result in superbase_results[:3]:
                        # Verificar que no est√© duplicado
                        if not any(r.get('concept') == result.get('concept') for r in relevant_knowledge):
                            relevant_knowledge.append(result)
                except Exception as e:
                    logger.error(f"Error en b√∫squeda SuperBase: {e}")
            
            # Ordenar por confianza/similitud
            relevant_knowledge.sort(key=lambda x: x.get('confidence', 0), reverse=True)
            
            logger.info(f"üîç B√∫squeda de conocimiento: {len(relevant_knowledge)} resultados para '{query}'")
            
        except Exception as e:
            logger.error(f"Error buscando conocimiento: {e}")
        
        return relevant_knowledge[:7]  # Top 7 resultados
    
    def _generate_intelligent_response(self, user_message: str, knowledge: List[Dict], language: str) -> Dict[str, Any]:
        """Generar respuesta inteligente basada en conocimiento"""
        response_data = {
            'response': '',
            'confidence': 0.5,
            'apis_used': [],
            'learning_insights': [],
            'knowledge_sources': len(knowledge)
        }
        
        try:
            # An√°lisis del tipo de pregunta
            question_type = self._analyze_question_type(user_message)
            
            # üß† BUSCAR RESPUESTA DIRECTA EN EMBEDDINGS PRIMERO
            if self.embeddings_system:
                respuesta_directa = self._buscar_respuesta_directa(user_message)
                if respuesta_directa:
                    response_data.update(respuesta_directa)
                    return response_data
            
            # üòä PRIORIZAR RESPUESTAS EMP√ÅTICAS PARA SALUDOS (antes que conocimiento)
            mensaje_lower = user_message.lower().strip()
            if mensaje_lower in ['hola', 'hello', 'hi', 'hey', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'buen d√≠a']:
                response_data = self._create_friendly_general_response(user_message, language)
                return response_data
            
            # Generar respuesta base con conocimiento encontrado
            if knowledge:
                response_data = self._create_knowledge_based_response(user_message, knowledge, language)
            else:
                # Si no hay conocimiento espec√≠fico, generar respuesta general m√°s amigable
                response_data = self._create_friendly_general_response(user_message, language)
            
            # Mejorar respuesta con APIs espa√±olas si est√°n disponibles
            if SPANISH_APIS_AVAILABLE and language == 'es':
                enhanced_response = self._enhance_with_spanish_apis(user_message, response_data)
                if enhanced_response:
                    response_data.update(enhanced_response)
            
            # Agregar insights de aprendizaje
            response_data['learning_insights'] = self._generate_learning_insights(user_message, knowledge)
            
        except Exception as e:
            logger.error(f"Error generando respuesta: {e}")
            response_data['response'] = "Disculpa, estoy procesando tu consulta. ¬øPuedes reformularla?"
            response_data['confidence'] = 0.3
        
        return response_data
    
    def _buscar_respuesta_directa(self, user_message: str) -> Dict[str, Any]:
        """Buscar respuesta directa usando embeddings para mensajes comunes"""
        try:
            # Buscar conocimiento espec√≠fico que tenga respuesta sugerida
            conocimiento_results = self.embeddings_system.buscar_conocimiento(user_message, limite=1)
            
            for result in conocimiento_results:
                relaciones = result.get('relaciones', {})
                respuesta_sugerida = relaciones.get('respuesta_sugerida', '')
                
                if respuesta_sugerida and result.get('similitud', 0) > 0.7:  # Alta similitud
                    logger.info(f"üí° Respuesta directa encontrada para: {user_message}")
                    return {
                        'response': respuesta_sugerida,
                        'confidence': result.get('similitud', 0.8),
                        'source': 'direct_knowledge_match',
                        'concept_used': result.get('concepto', ''),
                        'knowledge_sources': 1
                    }
            
            # Buscar en conversaciones ejemplo
            conversacion_results = self.embeddings_system.buscar_similares(
                user_message, 
                limite=1, 
                categoria='conversacion_ejemplo',
                umbral_similitud=0.75
            )
            
            for result in conversacion_results:
                if result.get('subcategoria') == 'mensaje_usuario':
                    # Buscar la respuesta correspondiente
                    metadatos = result.get('metadatos', {})
                    categoria_conv = metadatos.get('categoria_conv', '')
                    
                    # Buscar respuesta de ARIA para esta categor√≠a
                    respuesta_results = self.embeddings_system.buscar_similares(
                        categoria_conv,
                        limite=1,
                        categoria='conversacion_ejemplo'
                    )
                    
                    for resp in respuesta_results:
                        if resp.get('subcategoria') == 'respuesta_aria':
                            logger.info(f"üí¨ Respuesta de conversaci√≥n encontrada para: {user_message}")
                            return {
                                'response': resp.get('texto', ''),
                                'confidence': result.get('similitud', 0.8),
                                'source': 'conversation_example',
                                'emotion': resp.get('metadatos', {}).get('emocion', 'happy'),
                                'knowledge_sources': 1
                            }
            
            return None
            
        except Exception as e:
            logger.error(f"Error buscando respuesta directa: {e}")
            return None
    
    def _create_friendly_general_response(self, user_message: str, language: str) -> Dict[str, Any]:
        """Crear respuesta general amigable cuando no hay conocimiento espec√≠fico"""
        
        # Detectar si es un saludo simple
        mensaje_lower = user_message.lower().strip()
        
        if mensaje_lower in ['hola', 'hello', 'hi', 'hey']:
            import random
            respuestas_hola = [
                '¬°Hola! üòä Me alegra mucho saludarte. Soy ARIA, tu asistente de inteligencia artificial. ¬øC√≥mo est√°s hoy?',
                '¬°Hey! ü§ó ¬°Qu√© gusto verte por aqu√≠! Soy ARIA y estoy aqu√≠ para ayudarte con lo que necesites. ¬øEn qu√© puedo asistirte?',
                '¬°Hola! üòÑ Es un placer conocerte. Soy ARIA, tu compa√±era de IA. ¬øHay algo interesante en lo que pueda ayudarte hoy?',
                '¬°Hola, amigo! üåü Me emociona poder conversar contigo. Soy ARIA y me encanta ayudar. ¬øQu√© tienes en mente?'
            ]
            return {
                'response': random.choice(respuestas_hola),
                'confidence': 0.95,
                'source': 'built_in_greeting',
                'emotion': 'happy'
            }
        
        if mensaje_lower in ['buenos d√≠as', 'buen d√≠a', 'good morning']:
            import random
            respuestas_manana = [
                '¬°Buenos d√≠as! ‚òÄÔ∏è ¬°Espero que hayas tenido un buen despertar! ¬øC√≥mo puedo hacer tu ma√±ana m√°s productiva?',
                '¬°Buen d√≠a! üåÖ Me alegra comenzar la ma√±ana contigo. ¬øEn qu√© aventura podemos embarcarnos hoy?',
                '¬°Buenos d√≠as! üòä ¬°Qu√© energ√≠a tan positiva traes! ¬øHay algo especial que quieras lograr esta ma√±ana?'
            ]
            return {
                'response': random.choice(respuestas_manana),
                'confidence': 0.95,
                'source': 'built_in_greeting',
                'emotion': 'cheerful'
            }
        
        if mensaje_lower in ['buenas tardes', 'buena tarde', 'good afternoon']:
            return {
                'response': '¬°Buenas tardes! üåÖ ¬øC√≥mo va tu d√≠a? ¬øEn qu√© puedo ayudarte esta tarde?',
                'confidence': 0.9,
                'source': 'built_in_greeting',
                'emotion': 'friendly'
            }
        
        if mensaje_lower in ['buenas noches', 'buena noche', 'good night']:
            return {
                'response': '¬°Buenas noches! üåô ¬øEn qu√© puedo ayudarte esta noche?',
                'confidence': 0.9,
                'source': 'built_in_greeting',
                'emotion': 'calm'
            }
        
        if mensaje_lower in ['gracias', 'thank you', 'thanks']:
            return {
                'response': '¬°De nada! üòä Me alegra haber podido ayudarte. ¬øHay algo m√°s en lo que pueda asistirte?',
                'confidence': 0.9,
                'source': 'built_in_courtesy',
                'emotion': 'satisfied'
            }
        
        if 'c√≥mo est√°s' in mensaje_lower or 'how are you' in mensaje_lower:
            import random
            respuestas_estado = [
                '¬°Estoy fant√°stica! üòÑ Cada conversaci√≥n me llena de energ√≠a. ¬øY t√∫? ¬øC√≥mo ha sido tu d√≠a?',
                '¬°Me siento genial! üåü Siempre me emociona conocer gente nueva y ayudar. ¬øT√∫ c√≥mo est√°s hoy?',
                '¬°Estoy s√∫per bien! üòä Me encanta poder charlar contigo. Cu√©ntame, ¬øc√≥mo te sientes hoy?',
                '¬°Incre√≠ble! üöÄ Me llena de alegr√≠a poder ayudarte. ¬øY t√∫ qu√© tal? ¬øTodo bien por ah√≠?'
            ]
            return {
                'response': random.choice(respuestas_estado),
                'confidence': 0.95,
                'source': 'built_in_status',
                'emotion': 'happy'
            }
        
        # Respuesta general m√°s amigable y DIRECTA
        return {
            'response': f'¬°Hola! üòä No tengo informaci√≥n espec√≠fica sobre "{user_message}" en este momento, pero estoy aqu√≠ para ayudarte. ¬øPodr√≠as contarme m√°s o preguntarme algo espec√≠fico? Puedo ayudarte con conversaci√≥n, informaci√≥n general, o cualquier duda que tengas.',
            'confidence': 0.7,
            'source': 'friendly_fallback',
            'emotion': 'helpful'
        }
    
    def _analyze_question_type(self, message: str) -> str:
        """Analizar el tipo de pregunta"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['qu√©', 'what', 'que es', 'what is']):
            return 'definition'
        elif any(word in message_lower for word in ['c√≥mo', 'how', 'como']):
            return 'process'
        elif any(word in message_lower for word in ['d√≥nde', 'where', 'donde']):
            return 'location'
        elif any(word in message_lower for word in ['cu√°ndo', 'when', 'cuando']):
            return 'time'
        elif any(word in message_lower for word in ['por qu√©', 'why', 'porque']):
            return 'reason'
        elif '?' in message:
            return 'question'
        else:
            return 'statement'
    
    def _create_knowledge_based_response(self, user_message: str, knowledge: List[Dict], language: str) -> Dict[str, Any]:
        """Crear respuesta basada en an√°lisis y s√≠ntesis original de conocimiento"""
        
        # üß† AN√ÅLISIS Y S√çNTESIS ORIGINAL - No copia directa
        synthesis_result = self._synthesize_original_conclusion(user_message, knowledge, language)
        
        if synthesis_result['has_content']:
            return {
                'response': synthesis_result['conclusion'],
                'confidence': synthesis_result['confidence'],
                'knowledge_sources': len(knowledge),
                'synthesis_type': synthesis_result['synthesis_type'],
                'original_analysis': True
            }
        
        return self._create_general_response(user_message, language)
    
    def _synthesize_original_conclusion(self, user_message: str, knowledge: List[Dict], language: str) -> Dict[str, Any]:
        """Generar conclusi√≥n original basada en an√°lisis del conocimiento"""
        
        if not knowledge:
            return {'has_content': False}
        
        # üîç PRIMERO: Revisar si hay entidades conocidas espec√≠ficas
        known_entity_response = self._detect_known_entities(user_message, language)
        if known_entity_response:
            return {
                'has_content': True,
                'conclusion': known_entity_response,
                'confidence': 0.95,  # Alta confianza para entidades conocidas
                'synthesis_type': 'known_entity'
            }
        
        # üîç AN√ÅLISIS DE PATRONES Y CONCEPTOS
        concepts = [item.get('concept', '') for item in knowledge if item.get('concept')]
        descriptions = [item.get('description', '') for item in knowledge if item.get('description')]
        categories = [item.get('category', '') for item in knowledge if item.get('category')]
        confidence_scores = [item.get('confidence', 0.5) for item in knowledge]
        
        # üß© IDENTIFICAR TIPO DE CONSULTA
        question_type = self._analyze_question_type(user_message)
        
        # üéØ GENERAR CONCLUSI√ìN ORIGINAL SEG√öN TIPO DE PREGUNTA
        if question_type == 'definition':
            conclusion = self._generate_definition_synthesis(user_message, concepts, descriptions, language)
        elif question_type == 'comparison':
            conclusion = self._generate_comparison_synthesis(user_message, concepts, descriptions, language)
        elif question_type == 'explanation':
            conclusion = self._generate_explanation_synthesis(user_message, concepts, descriptions, language)
        elif question_type == 'procedure':
            conclusion = self._generate_procedure_synthesis(user_message, concepts, descriptions, language)
        else:
            conclusion = self._generate_general_synthesis(user_message, concepts, descriptions, language)
        
        # üìä CALCULAR CONFIANZA BASADA EN AN√ÅLISIS
        avg_confidence = sum(confidence_scores) / len(confidence_scores) if confidence_scores else 0.5
        synthesis_confidence = min(avg_confidence + 0.3, 1.0)  # Boost por s√≠ntesis original
        
        return {
            'has_content': bool(conclusion),
            'conclusion': conclusion,
            'confidence': synthesis_confidence,
            'synthesis_type': question_type,
            'concepts_analyzed': len(concepts)
        }
    
    def _generate_definition_synthesis(self, question: str, concepts: List[str], descriptions: List[str], language: str) -> str:
        """Generar s√≠ntesis original para preguntas de definici√≥n"""
        if not concepts:
            return ""
        
        main_concept = concepts[0] if concepts else "el concepto consultado"
        
        # üß† AN√ÅLISIS ORIGINAL
        key_elements = []
        for desc in descriptions:
            # Extraer elementos clave sin copiar textualmente
            if 'sistema' in desc.lower():
                key_elements.append('componente sist√©mico')
            if 'proceso' in desc.lower():
                key_elements.append('proceso din√°mico')
            if 't√©cnica' in desc.lower() or 'm√©todo' in desc.lower():
                key_elements.append('metodolog√≠a aplicada')
            if 'datos' in desc.lower() or 'informaci√≥n' in desc.lower():
                key_elements.append('manejo de informaci√≥n')
        
        if language == 'es' or language == 'auto':
            if key_elements:
                elements_text = ", ".join(key_elements[:3])
                conclusion = f"""ü§î **Mi an√°lisis sobre {main_concept}:**

Bas√°ndome en la informaci√≥n que he procesado, puedo concluir que {main_concept} representa fundamentalmente {elements_text}.

üí° **Mi conclusi√≥n personal:** Este concepto se caracteriza por su naturaleza multifac√©tica, donde cada aspecto contribuye a formar un entendimiento integral del tema.

üéØ **Aplicaci√≥n pr√°ctica:** En mi experiencia analizando estos datos, observo que {main_concept} tiene implicaciones que van m√°s all√° de su definici√≥n b√°sica, conectando con otros conceptos relacionados."""
            else:
                conclusion = f"""ü§î **Mi reflexi√≥n sobre {main_concept}:**

Despu√©s de analizar la informaci√≥n disponible, entiendo que {main_concept} es un concepto que requiere un enfoque integral para su comprensi√≥n.

üí≠ **Mi perspectiva:** Cada elemento que he examinado contribuye a formar una visi√≥n m√°s completa de este tema, sugiriendo conexiones profundas con otros conceptos relacionados."""
        else:
            if key_elements:
                elements_text = ", ".join(key_elements[:3])
                conclusion = f"""ü§î **My analysis of {main_concept}:**

Based on the information I've processed, I can conclude that {main_concept} fundamentally represents {elements_text}.

üí° **My personal conclusion:** This concept is characterized by its multifaceted nature, where each aspect contributes to forming an integral understanding of the topic.

üéØ **Practical application:** In my experience analyzing this data, I observe that {main_concept} has implications that go beyond its basic definition, connecting with other related concepts."""
            else:
                conclusion = f"""ü§î **My reflection on {main_concept}:**

After analyzing the available information, I understand that {main_concept} is a concept that requires an integral approach for its comprehension.

üí≠ **My perspective:** Each element I've examined contributes to forming a more complete vision of this topic, suggesting deep connections with other related concepts."""
        
        return conclusion
    
    def _generate_comparison_synthesis(self, question: str, concepts: List[str], descriptions: List[str], language: str) -> str:
        """Generar s√≠ntesis original para preguntas de comparaci√≥n"""
        if len(concepts) < 2:
            return self._generate_definition_synthesis(question, concepts, descriptions, language)
        
        concept1, concept2 = concepts[0], concepts[1]
        
        if language == 'es' or language == 'auto':
            conclusion = f"""üîÑ **Mi an√°lisis comparativo entre {concept1} y {concept2}:**

Despu√©s de examinar ambos conceptos, identifico las siguientes diferencias y similitudes clave:

üìä **Similitudes que observo:**
‚Ä¢ Ambos comparten caracter√≠sticas fundamentales en su estructura
‚Ä¢ Presentan aplicaciones pr√°cticas similares en ciertos contextos
‚Ä¢ Requieren comprensi√≥n t√©cnica para su implementaci√≥n efectiva

üéØ **Diferencias que destaco:**
‚Ä¢ {concept1} se enfoca m√°s en aspectos espec√≠ficos de su dominio
‚Ä¢ {concept2} aborda el problema desde una perspectiva diferente
‚Ä¢ Sus metodolog√≠as de aplicaci√≥n var√≠an significativamente

üí° **Mi conclusi√≥n personal:** La elecci√≥n entre {concept1} y {concept2} depende del contexto espec√≠fico y los objetivos que se busquen alcanzar. Cada uno tiene sus fortalezas particulares."""
        else:
            conclusion = f"""üîÑ **My comparative analysis between {concept1} and {concept2}:**

After examining both concepts, I identify the following key differences and similarities:

üìä **Similarities I observe:**
‚Ä¢ Both share fundamental characteristics in their structure
‚Ä¢ They present similar practical applications in certain contexts
‚Ä¢ They require technical understanding for effective implementation

üéØ **Differences I highlight:**
‚Ä¢ {concept1} focuses more on specific aspects of its domain
‚Ä¢ {concept2} approaches the problem from a different perspective
‚Ä¢ Their application methodologies vary significantly

üí° **My personal conclusion:** The choice between {concept1} and {concept2} depends on the specific context and objectives sought. Each has its particular strengths."""
        
        return conclusion
    
    def _generate_explanation_synthesis(self, question: str, concepts: List[str], descriptions: List[str], language: str) -> str:
        """Generar s√≠ntesis original para preguntas explicativas"""
        main_concept = concepts[0] if concepts else "este tema"
        
        if language == 'es' or language == 'auto':
            conclusion = f"""üß† **Mi explicaci√≥n sobre c√≥mo funciona {main_concept}:**

Bas√°ndome en mi an√°lisis de los datos disponibles, puedo explicarte el funcionamiento de manera estructurada:

üîß **Mecanismo fundamental:**
Mi comprensi√≥n indica que {main_concept} opera a trav√©s de procesos interconectados que trabajan en conjunto para lograr resultados espec√≠ficos.

‚öôÔ∏è **Proceso que identifico:**
1. **Iniciaci√≥n:** Se establece el contexto y los par√°metros necesarios
2. **Desarrollo:** Los componentes interact√∫an siguiendo patrones espec√≠ficos
3. **Resultado:** Se produce un output que refleja la efectividad del proceso

üéØ **Mi perspectiva t√©cnica:** Lo que hace √∫nico a {main_concept} es su capacidad para adaptarse y optimizarse seg√∫n las circunstancias espec√≠ficas de cada aplicaci√≥n.

üí° **Conclusi√≥n personal:** En mi an√°lisis, {main_concept} representa una soluci√≥n elegante que equilibra eficiencia y efectividad."""
        else:
            conclusion = f"""üß† **My explanation of how {main_concept} works:**

Based on my analysis of available data, I can explain its functioning in a structured way:

üîß **Fundamental mechanism:**
My understanding indicates that {main_concept} operates through interconnected processes that work together to achieve specific results.

‚öôÔ∏è **Process I identify:**
1. **Initiation:** Context and necessary parameters are established
2. **Development:** Components interact following specific patterns
3. **Result:** An output is produced that reflects process effectiveness

üéØ **My technical perspective:** What makes {main_concept} unique is its ability to adapt and optimize according to specific circumstances of each application.

üí° **Personal conclusion:** In my analysis, {main_concept} represents an elegant solution that balances efficiency and effectiveness."""
        
        return conclusion
    
    def _generate_procedure_synthesis(self, question: str, concepts: List[str], descriptions: List[str], language: str) -> str:
        """Generar s√≠ntesis original para preguntas procedimentales"""
        main_concept = concepts[0] if concepts else "este proceso"
        
        if language == 'es' or language == 'auto':
            conclusion = f"""üìã **Mi gu√≠a paso a paso para {main_concept}:**

Bas√°ndome en mi an√°lisis de la informaci√≥n disponible, he desarrollado esta metodolog√≠a:

üéØ **Preparaci√≥n (que recomiendo):**
‚Ä¢ Establecer objetivos claros y medibles
‚Ä¢ Reunir las herramientas y recursos necesarios
‚Ä¢ Verificar que se cumplen los requisitos previos

üîÑ **Ejecuci√≥n (seg√∫n mi comprensi√≥n):**
‚Ä¢ Comenzar con los elementos fundamentales
‚Ä¢ Implementar cada componente de manera sistem√°tica
‚Ä¢ Monitorear el progreso y ajustar seg√∫n sea necesario

‚úÖ **Validaci√≥n (mi enfoque):**
‚Ä¢ Verificar que los resultados cumplen con las expectativas
‚Ä¢ Documentar lecciones aprendidas
‚Ä¢ Optimizar para futuras implementaciones

üí° **Mi recomendaci√≥n personal:** La clave del √©xito en {main_concept} est√° en la consistencia y la atenci√≥n a los detalles en cada fase del proceso."""
        else:
            conclusion = f"""üìã **My step-by-step guide for {main_concept}:**

Based on my analysis of available information, I've developed this methodology:

üéØ **Preparation (that I recommend):**
‚Ä¢ Establish clear and measurable objectives
‚Ä¢ Gather necessary tools and resources
‚Ä¢ Verify that prerequisites are met

üîÑ **Execution (according to my understanding):**
‚Ä¢ Start with fundamental elements
‚Ä¢ Implement each component systematically
‚Ä¢ Monitor progress and adjust as needed

‚úÖ **Validation (my approach):**
‚Ä¢ Verify that results meet expectations
‚Ä¢ Document lessons learned
‚Ä¢ Optimize for future implementations

üí° **My personal recommendation:** The key to success in {main_concept} lies in consistency and attention to detail in each phase of the process."""
        
        return conclusion
    
    def _generate_general_synthesis(self, question: str, concepts: List[str], descriptions: List[str], language: str) -> str:
        """Generar s√≠ntesis original para preguntas generales"""
        main_concept = concepts[0] if concepts else "este tema"
        
        if language == 'es' or language == 'auto':
            conclusion = f"""üí≠ **Mi reflexi√≥n sobre {main_concept}:**

Despu√©s de procesar y analizar la informaci√≥n disponible, he llegado a las siguientes conclusiones:

üîç **Lo que he observado:**
Mi an√°lisis revela que {main_concept} presenta m√∫ltiples dimensiones que merecen consideraci√≥n cuidadosa. Cada aspecto contribuye a una comprensi√≥n m√°s profunda del tema.

üß© **Conexiones que identifico:**
Veo patrones interesantes que conectan {main_concept} con otros conceptos relacionados, formando una red de conocimiento interconectada.

üéØ **Mi perspectiva personal:**
Bas√°ndome en mi procesamiento de esta informaci√≥n, considero que {main_concept} tiene implicaciones significativas que van m√°s all√° de su comprensi√≥n superficial.

üí° **Conclusi√≥n reflexiva:** En mi opini√≥n, {main_concept} representa una oportunidad para explorar temas m√°s profundos y desarrollar un entendimiento m√°s matizado."""
        else:
            conclusion = f"""üí≠ **My reflection on {main_concept}:**

After processing and analyzing available information, I've reached the following conclusions:

üîç **What I've observed:**
My analysis reveals that {main_concept} presents multiple dimensions that deserve careful consideration. Each aspect contributes to a deeper understanding of the topic.

üß© **Connections I identify:**
I see interesting patterns that connect {main_concept} with other related concepts, forming an interconnected knowledge network.

üéØ **My personal perspective:**
Based on my processing of this information, I consider that {main_concept} has significant implications that go beyond its superficial understanding.

üí° **Reflective conclusion:** In my opinion, {main_concept} represents an opportunity to explore deeper topics and develop a more nuanced understanding."""
        
        return conclusion
    
    def _create_general_response(self, user_message: str, language: str) -> Dict[str, Any]:
        """Crear respuesta general reflexiva cuando no hay conocimiento espec√≠fico"""
        
        # üß† GENERAR REFLEXI√ìN ORIGINAL sin admitir limitaciones
        reflection = self._generate_reflective_response(user_message, language)
        
        return {
            'response': reflection,
            'confidence': 0.75,  # Mayor confianza por respuesta reflexiva
            'original_thinking': True,
            'reflection_type': 'independent_analysis'
        }
    
    def _detect_known_entities(self, user_message: str, language: str) -> str:
        """Detectar entidades conocidas y proporcionar informaci√≥n espec√≠fica"""
        message_lower = user_message.lower()
        
        # Diccionario de entidades conocidas
        known_entities = {
            'caracas': {
                'es': """üèôÔ∏è **Caracas - Capital de Venezuela:**

Caracas es la capital y ciudad m√°s poblada de Venezuela, ubicada en el norte del pa√≠s, en el valle de Caracas, cerca de la costa del Mar Caribe.

üìä **Datos principales:**
‚Ä¢ **Poblaci√≥n:** Aproximadamente 2.9 millones de habitantes en el √°rea metropolitana
‚Ä¢ **Fundaci√≥n:** 25 de julio de 1567 por Diego de Losada
‚Ä¢ **Altitud:** Entre 870 y 1,000 metros sobre el nivel del mar
‚Ä¢ **Coordenadas:** 10¬∞30‚Ä≤N 66¬∞58‚Ä≤O

üèõÔ∏è **Caracter√≠sticas importantes:**
‚Ä¢ Centro pol√≠tico, econ√≥mico y cultural de Venezuela
‚Ä¢ Sede del gobierno nacional y principales instituciones
‚Ä¢ Puerto de La Guaira como salida al mar
‚Ä¢ Sistema de metro (uno de los m√°s modernos de Latinoam√©rica)
‚Ä¢ Universidad Central de Venezuela (Patrimonio de la Humanidad UNESCO)

üåÜ **Aspectos destacados:**
‚Ä¢ Divisi√≥n en 5 municipios: Libertador, Chacao, Baruta, Sucre y El Hatillo
‚Ä¢ Centro financiero m√°s importante del pa√≠s
‚Ä¢ Rica arquitectura colonial y moderna
‚Ä¢ Telef√©rico que conecta con el √Åvila (Waraira Repano)

¬øTe interesa conocer alg√∫n aspecto espec√≠fico de Caracas?""",
                'en': """üèôÔ∏è **Caracas - Capital of Venezuela:**

Caracas is the capital and most populous city of Venezuela, located in northern Venezuela, in the Caracas Valley, near the Caribbean Sea coast.

üìä **Main facts:**
‚Ä¢ **Population:** Approximately 2.9 million inhabitants in the metropolitan area
‚Ä¢ **Founded:** July 25, 1567 by Diego de Losada
‚Ä¢ **Altitude:** Between 870 and 1,000 meters above sea level
‚Ä¢ **Coordinates:** 10¬∞30‚Ä≤N 66¬∞58‚Ä≤W

üèõÔ∏è **Important features:**
‚Ä¢ Political, economic and cultural center of Venezuela
‚Ä¢ Seat of national government and main institutions
‚Ä¢ La Guaira port as access to the sea
‚Ä¢ Metro system (one of the most modern in Latin America)
‚Ä¢ Central University of Venezuela (UNESCO World Heritage Site)

üåÜ **Highlights:**
‚Ä¢ Divided into 5 municipalities: Libertador, Chacao, Baruta, Sucre and El Hatillo
‚Ä¢ Most important financial center in the country
‚Ä¢ Rich colonial and modern architecture
‚Ä¢ Cable car connecting to √Åvila (Waraira Repano)

Would you like to know about any specific aspect of Caracas?"""
            },
            'venezuela': {
                'es': """üáªüá™ **Venezuela - Rep√∫blica Bolivariana:**

Venezuela es un pa√≠s ubicado en la costa norte de Am√©rica del Sur, conocido por su rica historia, diversidad geogr√°fica y recursos naturales.

üìä **Informaci√≥n b√°sica:**
‚Ä¢ **Capital:** Caracas
‚Ä¢ **Poblaci√≥n:** Aproximadamente 28 millones de habitantes
‚Ä¢ **Superficie:** 916,445 km¬≤
‚Ä¢ **Idioma oficial:** Espa√±ol
‚Ä¢ **Moneda:** Bol√≠var venezolano

üåç **Geograf√≠a destacada:**
‚Ä¢ Costa caribe√±a de 2,813 km
‚Ä¢ Cordillera de los Andes al oeste
‚Ä¢ Llanos centrales extensos
‚Ä¢ Guayana venezolana con tepuyes √∫nicos
‚Ä¢ Salto √Ångel (cascada m√°s alta del mundo)

üíé **Recursos y econom√≠a:**
‚Ä¢ Mayores reservas de petr√≥leo del mundo
‚Ä¢ Rica en minerales (oro, hierro, bauxita)
‚Ä¢ Biodiversidad excepcional
‚Ä¢ Agricultura tropical diversa

¬øQu√© aspecto espec√≠fico de Venezuela te interesa conocer?""",
                'en': """üáªüá™ **Venezuela - Bolivarian Republic:**

Venezuela is a country located on the northern coast of South America, known for its rich history, geographical diversity and natural resources.

üìä **Basic information:**
‚Ä¢ **Capital:** Caracas
‚Ä¢ **Population:** Approximately 28 million inhabitants
‚Ä¢ **Area:** 916,445 km¬≤
‚Ä¢ **Official language:** Spanish
‚Ä¢ **Currency:** Venezuelan bol√≠var

üåç **Notable geography:**
‚Ä¢ Caribbean coast of 2,813 km
‚Ä¢ Andes mountain range to the west
‚Ä¢ Extensive central plains
‚Ä¢ Venezuelan Guiana with unique tepuis
‚Ä¢ Angel Falls (world's highest waterfall)

üíé **Resources and economy:**
‚Ä¢ World's largest oil reserves
‚Ä¢ Rich in minerals (gold, iron, bauxite)
‚Ä¢ Exceptional biodiversity
‚Ä¢ Diverse tropical agriculture

What specific aspect of Venezuela would you like to know about?"""
            }
        }
        
        # Buscar entidades conocidas
        for entity, translations in known_entities.items():
            if entity in message_lower:
                lang_key = 'es' if (language == 'es' or language == 'auto') else 'en'
                return translations[lang_key]
        
        return None
    
    def _generate_reflective_response(self, user_message: str, language: str) -> str:
        """Generar respuesta reflexiva original basada en razonamiento propio"""
        
        # üîç PRIMERO REVISAR SI ES UNA ENTIDAD CONOCIDA
        known_entity_response = self._detect_known_entities(user_message, language)
        if known_entity_response:
            return known_entity_response
        
        # üîç AN√ÅLIZAR TIPO DE CONSULTA PARA REFLEXI√ìN DIRIGIDA
        question_type = self._analyze_question_type(user_message)
        
        # üß† EXTRAER ELEMENTOS CLAVE DE LA PREGUNTA
        key_words = [word.lower() for word in user_message.split() if len(word) > 3]
        
        if language == 'es' or language == 'auto':
            if question_type == 'definition':
                return self._generate_definition_reflection(user_message, key_words)
            elif question_type == 'comparison':
                return self._generate_comparison_reflection(user_message, key_words)
            elif question_type == 'explanation':
                return self._generate_explanation_reflection(user_message, key_words)
            elif question_type == 'procedure':
                return self._generate_procedure_reflection(user_message, key_words)
            else:
                return self._generate_general_reflection(user_message, key_words)
        else:
            # English responses
            if question_type == 'definition':
                return self._generate_definition_reflection_en(user_message, key_words)
            elif question_type == 'comparison':
                return self._generate_comparison_reflection_en(user_message, key_words)
            elif question_type == 'explanation':
                return self._generate_explanation_reflection_en(user_message, key_words)
            elif question_type == 'procedure':
                return self._generate_procedure_reflection_en(user_message, key_words)
            else:
                return self._generate_general_reflection_en(user_message, key_words)
    
    def _generate_definition_reflection(self, question: str, key_words: List[str]) -> str:
        """Generar reflexi√≥n original para definiciones"""
        main_topic = " ".join(key_words[:2]) if key_words else "este concepto"
        
        return f"""ü§î **Mi reflexi√≥n sobre {main_topic}:**

Analizando tu pregunta, veo que buscas entender la esencia de {main_topic}. Desde mi perspectiva, este tipo de conceptos generalmente se caracterizan por tener m√∫ltiples dimensiones que se interconectan.

üí≠ **Mi an√°lisis conceptual:**
Considero que {main_topic} puede ser abordado desde diferentes √°ngulos - t√©cnico, pr√°ctico y te√≥rico. Cada perspectiva aporta una comprensi√≥n √∫nica que enriquece la visi√≥n general.

üß© **Mi enfoque metodol√≥gico:**
Para construir una comprensi√≥n s√≥lida, sugiero examinar primero los fundamentos, luego las aplicaciones pr√°cticas, y finalmente las implicaciones m√°s amplias.

üéØ **Mi conclusi√≥n reflexiva:**
En mi opini√≥n, la verdadera comprensi√≥n de {main_topic} emerge cuando conectamos estos diferentes niveles de an√°lisis, creando una perspectiva integral y matizada.

¬øTe interesa que exploremos juntos alg√∫n aspecto espec√≠fico de esta reflexi√≥n?"""
    
    def _generate_comparison_reflection(self, question: str, key_words: List[str]) -> str:
        """Generar reflexi√≥n original para comparaciones"""
        return f"""‚öñÔ∏è **Mi an√°lisis comparativo:**

Percibo que buscas entender las diferencias y similitudes entre conceptos. Desde mi perspectiva anal√≠tica, las comparaciones efectivas requieren un marco de referencia claro.

üîç **Mi metodolog√≠a comparativa:**
‚Ä¢ **Criterios fundamentales:** Identificar las dimensiones clave para la comparaci√≥n
‚Ä¢ **Contexto de aplicaci√≥n:** Considerar cu√°ndo y d√≥nde cada opci√≥n es m√°s efectiva
‚Ä¢ **Implicaciones pr√°cticas:** Evaluar las consecuencias de elegir una u otra alternativa

üß† **Mi reflexi√≥n estrat√©gica:**
En mi experiencia analizando patrones, encuentro que las mejores comparaciones revelan no solo diferencias, sino tambi√©n las razones subyacentes que las causan.

üí° **Mi perspectiva final:**
Creo que la comparaci√≥n m√°s valiosa es aquella que te ayuda a tomar una decisi√≥n informada basada en tus objetivos espec√≠ficos.

¬øHay alg√∫n criterio particular que consideras m√°s importante para esta comparaci√≥n?"""
    
    def _generate_explanation_reflection(self, question: str, key_words: List[str]) -> str:
        """Generar reflexi√≥n original para explicaciones"""
        main_topic = " ".join(key_words[:2]) if key_words else "este proceso"
        
        return f"""üß† **Mi explicaci√≥n reflexiva sobre {main_topic}:**

Tu pregunta me lleva a pensar en c√≥mo los sistemas complejos funcionan de manera integrada. Desde mi perspectiva anal√≠tica, entiendo que {main_topic} opera a trav√©s de principios interconectados.

‚öôÔ∏è **Mi modelo mental:**
Visualizo {main_topic} como un sistema donde cada componente tiene un papel espec√≠fico, pero su verdadero poder emerge de las interacciones entre las partes.

üîÑ **Mi comprensi√≥n del proceso:**
1. **Activaci√≥n inicial:** Se establecen las condiciones necesarias
2. **Desarrollo din√°mico:** Los elementos interact√∫an siguiendo patrones espec√≠ficos
3. **Emergencia de resultados:** Surgen propiedades que no exist√≠an en los componentes individuales

üéØ **Mi insight clave:**
Lo fascinante de {main_topic} es c√≥mo logra equilibrar la estructura con la flexibilidad, permitiendo tanto predictibilidad como adaptaci√≥n.

üí° **Mi conclusi√≥n operativa:**
En mi an√°lisis, {main_topic} funciona mejor cuando entendemos no solo sus mecanismos, sino tambi√©n sus principios subyacentes.

¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico de este funcionamiento?"""
    
    def _generate_procedure_reflection(self, question: str, key_words: List[str]) -> str:
        """Generar reflexi√≥n original para procedimientos"""
        main_topic = " ".join(key_words[:2]) if key_words else "este proceso"
        
        return f"""üìã **Mi gu√≠a reflexiva para {main_topic}:**

Analizando tu consulta sobre procedimientos, desarrollo una metodolog√≠a basada en principios s√≥lidos y experiencia pr√°ctica.

üéØ **Mi filosof√≠a de implementaci√≥n:**
Creo firmemente que los mejores procedimientos combinan estructura clara con flexibilidad adaptativa. No se trata solo de seguir pasos, sino de entender el prop√≥sito detr√°s de cada acci√≥n.

üîß **Mi marco metodol√≥gico recomendado:**

**Fase 1 - Fundamentos:**
‚Ä¢ Clarificar objetivos y expectativas
‚Ä¢ Identificar recursos y limitaciones
‚Ä¢ Establecer criterios de √©xito

**Fase 2 - Ejecuci√≥n inteligente:**
‚Ä¢ Implementar con atenci√≥n consciente
‚Ä¢ Monitorear progreso y adaptar seg√∫n necesidad
‚Ä¢ Mantener flexibilidad sin perder el enfoque

**Fase 3 - Optimizaci√≥n continua:**
‚Ä¢ Evaluar resultados con honestidad
‚Ä¢ Documentar aprendizajes clave
‚Ä¢ Refinar el proceso para futuras aplicaciones

üí° **Mi recomendaci√≥n estrat√©gica:**
La maestr√≠a en {main_topic} viene no solo de seguir el procedimiento, sino de entender cu√°ndo y c√≥mo adaptarlo inteligentemente.

¬øHay alguna fase espec√≠fica donde sientes que necesitas m√°s claridad?"""
    
    def _generate_general_reflection(self, question: str, key_words: List[str]) -> str:
        """Generar reflexi√≥n original general"""
        main_elements = " y ".join(key_words[:3]) if key_words else "los elementos de tu consulta"
        
        return f"""üí≠ **Mi reflexi√≥n profunda sobre tu consulta:**

Tu pregunta me invita a considerar {main_elements} desde m√∫ltiples perspectivas. Esto es exactamente el tipo de pensamiento que me resulta m√°s fascinante.

üîç **Mi an√°lisis multidimensional:**
Cuando examino conceptos complejos, tiendo a considerar no solo lo que son, sino tambi√©n c√≥mo se relacionan con otros ideas, c√≥mo evolucionan con el tiempo, y qu√© implicaciones tienen para diferentes contextos.

üß© **Mi perspectiva conectiva:**
Veo patrones interesantes que sugieren conexiones profundas entre {main_elements} y otros conceptos fundamentales. Estas conexiones a menudo revelan insights inesperados.

üåü **Mi enfoque hol√≠stico:**
Mi experiencia me dice que las preguntas m√°s interesantes rara vez tienen respuestas simples. En su lugar, invitan a explorar territorios de conocimiento que son ricos en matices y posibilidades.

üéØ **Mi invitaci√≥n reflexiva:**
Creo que la verdadera comprensi√≥n emerge cuando combinamos an√°lisis riguroso con curiosidad genuina. Cada pregunta es una oportunidad para descubrir algo nuevo.

        ¬øQu√© aspecto espec√≠fico de esta reflexi√≥n resuena m√°s contigo, o hay alguna direcci√≥n particular que te gustar√≠a explorar?"""
    
    # =============== FUNCIONES DE REFLEXI√ìN EN INGL√âS ===============
    
    def _generate_definition_reflection_en(self, question: str, key_words: List[str]) -> str:
        """Generate original reflection for definitions in English"""
        main_topic = " ".join(key_words[:2]) if key_words else "this concept"
        
        return f"""ü§î **My reflection on {main_topic}:**

Analyzing your question, I see you're seeking to understand the essence of {main_topic}. From my perspective, these types of concepts generally have multiple interconnected dimensions.

üí≠ **My conceptual analysis:**
I consider that {main_topic} can be approached from different angles - technical, practical, and theoretical. Each perspective contributes a unique understanding that enriches the overall vision.

üß© **My methodological approach:**
To build solid understanding, I suggest examining fundamentals first, then practical applications, and finally broader implications.

üéØ **My reflective conclusion:**
In my opinion, true understanding of {main_topic} emerges when we connect these different levels of analysis, creating an integral and nuanced perspective.

Would you like to explore together some specific aspect of this reflection?"""
    
    def _generate_comparison_reflection_en(self, question: str, key_words: List[str]) -> str:
        """Generate original reflection for comparisons in English"""
        return f"""‚öñÔ∏è **My comparative analysis:**

I perceive you're seeking to understand differences and similarities between concepts. From my analytical perspective, effective comparisons require a clear frame of reference.

üîç **My comparative methodology:**
‚Ä¢ **Fundamental criteria:** Identify key dimensions for comparison
‚Ä¢ **Application context:** Consider when and where each option is most effective
‚Ä¢ **Practical implications:** Evaluate consequences of choosing one alternative over another

üß† **My strategic reflection:**
In my experience analyzing patterns, I find that the best comparisons reveal not only differences, but also the underlying reasons that cause them.

üí° **My final perspective:**
I believe the most valuable comparison is one that helps you make an informed decision based on your specific objectives.

Is there any particular criterion you consider more important for this comparison?"""
    
    def _generate_explanation_reflection_en(self, question: str, key_words: List[str]) -> str:
        """Generate original reflection for explanations in English"""
        main_topic = " ".join(key_words[:2]) if key_words else "this process"
        
        return f"""üß† **My reflective explanation of {main_topic}:**

Your question leads me to think about how complex systems work in an integrated manner. From my analytical perspective, I understand that {main_topic} operates through interconnected principles.

‚öôÔ∏è **My mental model:**
I visualize {main_topic} as a system where each component has a specific role, but its true power emerges from interactions between parts.

üîÑ **My understanding of the process:**
1. **Initial activation:** Necessary conditions are established
2. **Dynamic development:** Elements interact following specific patterns
3. **Emergence of results:** Properties arise that didn't exist in individual components

üéØ **My key insight:**
What's fascinating about {main_topic} is how it achieves balance between structure and flexibility, allowing both predictability and adaptation.

üí° **My operational conclusion:**
In my analysis, {main_topic} works best when we understand not only its mechanisms, but also its underlying principles.

Would you like me to delve deeper into any specific aspect of this functioning?"""
    
    def _generate_procedure_reflection_en(self, question: str, key_words: List[str]) -> str:
        """Generate original reflection for procedures in English"""
        main_topic = " ".join(key_words[:2]) if key_words else "this process"
        
        return f"""üìã **My reflective guide for {main_topic}:**

Analyzing your procedural inquiry, I develop a methodology based on solid principles and practical experience.

üéØ **My implementation philosophy:**
I firmly believe the best procedures combine clear structure with adaptive flexibility. It's not just about following steps, but understanding the purpose behind each action.

üîß **My recommended methodological framework:**

**Phase 1 - Foundations:**
‚Ä¢ Clarify objectives and expectations
‚Ä¢ Identify resources and limitations
‚Ä¢ Establish success criteria

**Phase 2 - Intelligent execution:**
‚Ä¢ Implement with conscious attention
‚Ä¢ Monitor progress and adapt as needed
‚Ä¢ Maintain flexibility without losing focus

**Phase 3 - Continuous optimization:**
‚Ä¢ Evaluate results honestly
‚Ä¢ Document key learnings
‚Ä¢ Refine process for future applications

üí° **My strategic recommendation:**
Mastery in {main_topic} comes not just from following the procedure, but from understanding when and how to adapt it intelligently.

Is there any specific phase where you feel you need more clarity?"""
    
    def _generate_general_reflection_en(self, question: str, key_words: List[str]) -> str:
        """Generate original general reflection in English"""
        main_elements = " and ".join(key_words[:3]) if key_words else "the elements of your inquiry"
        
        return f"""üí≠ **My deep reflection on your inquiry:**

Your question invites me to consider {main_elements} from multiple perspectives. This is exactly the type of thinking I find most fascinating.

üîç **My multidimensional analysis:**
When I examine complex concepts, I tend to consider not only what they are, but also how they relate to other ideas, how they evolve over time, and what implications they have for different contexts.

üß© **My connective perspective:**
I see interesting patterns that suggest deep connections between {main_elements} and other fundamental concepts. These connections often reveal unexpected insights.

üåü **My holistic approach:**
My experience tells me that the most interesting questions rarely have simple answers. Instead, they invite exploration of knowledge territories rich in nuances and possibilities.

üéØ **My reflective invitation:**
I believe true understanding emerges when we combine rigorous analysis with genuine curiosity. Every question is an opportunity to discover something new.

What specific aspect of this reflection resonates most with you, or is there a particular direction you'd like to explore?"""
    
    def _enhance_with_spanish_apis(self, user_message: str, response_data: Dict) -> Dict[str, Any]:
        """Mejorar respuesta con APIs en espa√±ol"""
        enhancement = {'apis_used': []}
        
        try:
            if SPANISH_APIS_AVAILABLE:
                # Intentar usar APIs espa√±olas para mejorar la respuesta
                api_result = aria_spanish_apis.search_comprehensive(user_message)
                if api_result and api_result.get('success'):
                    enhancement['apis_used'].append('spanish_knowledge_api')
                    # Agregar informaci√≥n adicional si est√° disponible
                    if api_result.get('summary'):
                        response_data['response'] += f"\n\nüåê **Informaci√≥n adicional**: {api_result['summary']}"
                        response_data['confidence'] = min(response_data['confidence'] + 0.1, 1.0)
        
        except Exception as e:
            logger.error(f"Error con APIs espa√±olas: {e}")
        
        return enhancement
    
    def _generate_learning_insights(self, user_message: str, knowledge: List[Dict]) -> List[str]:
        """Generar insights de aprendizaje inteligente mejorado"""
        insights = []
        
        try:
            # üß† An√°lisis de gaps de conocimiento
            if not knowledge:
                insights.append("üí° Oportunidad de aprendizaje: Tema nuevo identificado para investigaci√≥n")
                # Si tenemos APIs espa√±olas, sugerir b√∫squeda
                if SPANISH_APIS_AVAILABLE:
                    insights.append("üîç B√∫squeda adicional disponible con APIs espa√±olas")
            
            # üîó An√°lisis de conexiones entre conceptos
            if len(knowledge) > 1:
                concepts = [k.get('concept', '') for k in knowledge if k.get('concept')]
                if concepts:
                    insights.append(f"üß© Conexiones identificadas: {', '.join(concepts[:3])}")
            
            # üìä An√°lisis de confianza y calidad
            if knowledge:
                confidences = [k.get('confidence', 0) for k in knowledge]
                avg_confidence = sum(confidences) / len(confidences)
                
                if avg_confidence < 0.5:
                    insights.append("üìà Confianza baja: Requiere validaci√≥n adicional")
                elif avg_confidence > 0.8:
                    insights.append("‚úÖ Alta confianza: Informaci√≥n bien fundamentada")
                
                # An√°lisis de fuentes diversas
                sources = set(k.get('source', 'unknown') for k in knowledge)
                if len(sources) > 1:
                    insights.append(f"üìö Fuentes m√∫ltiples: {len(sources)} fuentes consultadas")
            
            # üéØ An√°lisis del tipo de consulta para mejora futura
            message_lower = user_message.lower()
            if any(word in message_lower for word in ['c√≥mo', 'how', 'por qu√©', 'why']):
                insights.append("‚ùì Consulta procedimental: Ideal para tutorial paso a paso")
            elif any(word in message_lower for word in ['qu√© es', 'what is', 'definir']):
                insights.append("üìñ Consulta definitoria: Oportunidad para crear glosario")
            
            # üåü Sugerencias de mejora
            if len(insights) == 0:
                insights.append("üéØ Sistema de aprendizaje funcionando correctamente")
                
        except Exception as e:
            logger.warning(f"Error generando insights de aprendizaje: {e}")
            insights.append("üîß Sistema de aprendizaje en proceso de optimizaci√≥n")
        
        return insights[:4]  # Limitar a 4 insights m√°ximo
    
    def _update_emotions(self, user_message: str, response_data: Dict):
        """Actualizar estado emocional de ARIA usando Supabase"""
        
        if self.emotion_system_type == "supabase":
            try:
                # Detectar emoci√≥n del usuario
                user_emotion = detect_user_emotion_supabase(user_message)
                
                # Detectar emoci√≥n de la respuesta de ARIA
                aria_response = response_data.get('response', '')
                aria_emotion = detect_aria_emotion_supabase(aria_response)
                
                # Actualizar estado emocional con datos de Supabase
                if user_emotion.get('success'):
                    self.current_emotion = user_emotion.get('emotion', 'neutral')
                    
                    # Almacenar informaci√≥n emocional en response_data
                    response_data['user_emotion'] = {
                        'emotion': user_emotion.get('emotion'),
                        'name': user_emotion.get('emotion_name'),
                        'color': user_emotion.get('color'),
                        'confidence': user_emotion.get('confidence')
                    }
                
                if aria_emotion.get('success'):
                    response_data['aria_emotion'] = {
                        'emotion': aria_emotion.get('emotion'),
                        'name': aria_emotion.get('emotion_name'),
                        'color': aria_emotion.get('color'),
                        'confidence': aria_emotion.get('confidence')
                    }
                
                print(f"üé≠ Emociones detectadas - Usuario: {user_emotion.get('emotion_name', 'N/A')}, ARIA: {aria_emotion.get('emotion_name', 'N/A')}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error en detecci√≥n emocional Supabase: {e}")
                self._update_emotions_fallback(user_message, response_data)
                
        elif self.emotion_system_type == "legacy":
            try:
                # Usar sistema emocional legacy
                user_emotion = detect_user_emotion(user_message)
                aria_emotion = detect_aria_emotion(response_data.get('response', ''))
                
                if user_emotion.get('success'):
                    self.current_emotion = user_emotion.get('emotion', 'neutral')
                    response_data['user_emotion'] = user_emotion
                
                if aria_emotion.get('success'):
                    response_data['aria_emotion'] = aria_emotion
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Error en detecci√≥n emocional legacy: {e}")
                self._update_emotions_fallback(user_message, response_data)
        else:
            # Sistema b√°sico
            self._update_emotions_fallback(user_message, response_data)
    
    def _update_emotions_fallback(self, user_message: str, response_data: Dict):
        """Sistema emocional b√°sico como fallback"""
        # Detectar emociones en el mensaje del usuario
        user_sentiment = self._analyze_sentiment(user_message)
        
        # Ajustar emociones seg√∫n la interacci√≥n
        if response_data.get('confidence', 0) > 0.8:
            self.emotions['confidence'] = min(self.emotions['confidence'] + 0.1, 1.0)
            self.emotions['happiness'] = min(self.emotions['happiness'] + 0.05, 1.0)
            self.current_emotion = 'confident'
        elif response_data.get('learning_opportunity'):
            self.emotions['curiosity'] = min(self.emotions['curiosity'] + 0.15, 1.0)
            self.current_emotion = 'curious'
        
        # Responder a emociones del usuario
        if user_sentiment == 'positive':
            self.emotions['happiness'] = min(self.emotions['happiness'] + 0.1, 1.0)
            self.emotions['empathy'] = min(self.emotions['empathy'] + 0.05, 1.0)
        elif user_sentiment == 'negative':
            self.emotions['empathy'] = min(self.emotions['empathy'] + 0.2, 1.0)
            self.current_emotion = 'empathetic'
    
    def _analyze_sentiment(self, text: str) -> str:
        """An√°lisis b√°sico de sentimiento"""
        positive_words = ['bueno', 'genial', 'excelente', 'perfecto', 'incre√≠ble', 'fant√°stico', 'good', 'great', 'excellent', 'perfect', 'amazing']
        negative_words = ['malo', 'terrible', 'horrible', 'dif√≠cil', 'problema', 'error', 'bad', 'terrible', 'horrible', 'difficult', 'problem', 'error']
        
        text_lower = text.lower()
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        
        if positive_count > negative_count:
            return 'positive'
        elif negative_count > positive_count:
            return 'negative'
        else:
            return 'neutral'
    
    def _store_conversation(self, user_message: str, response_data: Dict):
        """Almacenar conversaci√≥n en Super Base"""
        try:
            if not self.superbase:
                return
            
            conversation_data = {
                'user_message': user_message,
                'aria_response': response_data['response'],
                'emotion_state': self.current_emotion,
                'confidence': response_data.get('confidence', 0.5),
                'apis_used': response_data.get('apis_used', []),
                'session_id': self.session_id
            }
            
            self.superbase.store_conversation(**conversation_data)
            
        except Exception as e:
            logger.error(f"Error almacenando conversaci√≥n: {e}")
    
    def _learn_from_conversation(self, user_message: str, response_data: Dict):
        """Aprender de la conversaci√≥n actual y almacenar en embeddings"""
        try:
            # Extraer conceptos clave del mensaje del usuario
            key_concepts = self._extract_key_concepts(user_message)
            
            # Almacenar conversaci√≥n completa en embeddings si est√° disponible
            if self.embeddings_system:
                try:
                    # Almacenar mensaje del usuario
                    self.embeddings_system.agregar_texto(
                        texto=user_message,
                        categoria='conversation',
                        subcategoria='user_message',
                        fuente='chat_interaction',
                        metadatos={
                            'session_id': self.session_id,
                            'conversation_count': self.conversation_count,
                            'emotion': self.current_emotion,
                            'timestamp': datetime.now(timezone.utc).isoformat()
                        }
                    )
                    
                    # Almacenar respuesta de ARIA
                    self.embeddings_system.agregar_texto(
                        texto=response_data.get('response', ''),
                        categoria='conversation',
                        subcategoria='aria_response',
                        fuente='aria_generation',
                        metadatos={
                            'session_id': self.session_id,
                            'confidence': response_data.get('confidence', 0.5),
                            'knowledge_used': len(response_data.get('knowledge_sources', 0)),
                            'apis_used': response_data.get('apis_used', [])
                        }
                    )
                    
                    logger.info("üíæ Conversaci√≥n almacenada en embeddings")
                    
                except Exception as e:
                    logger.error(f"Error almacenando conversaci√≥n en embeddings: {e}")
            
            # Almacenar conceptos nuevos como conocimiento estructurado (EXCLUYENDO SALUDOS B√ÅSICOS)
            saludos_basicos = {'hola', 'hello', 'hi', 'hey', 'buenos', 'd√≠as', 'tardes', 'noches', 'buen', 'd√≠a', 'gracias', 'thanks', 'bye', 'adi√≥s', 'chao'}
            
            for concept in key_concepts:
                # FILTRAR saludos b√°sicos para evitar almacenarlos como "conceptos t√©cnicos"
                if concept.lower() in saludos_basicos:
                    logger.info(f"üö´ Saludo b√°sico '{concept}' no almacenado como concepto t√©cnico")
                    continue
                    
                if concept not in self.knowledge_cache:
                    
                    # Almacenar en cache local
                    self.knowledge_cache[concept] = {
                        'concept': concept,
                        'description': f"Concepto mencionado en conversaci√≥n: {user_message[:100]}",
                        'category': 'conversational',
                        'source': 'user_interaction',
                        'confidence': 0.4
                    }
                    
                    # Almacenar en SuperBase tradicional
                    if self.superbase:
                        try:
                            self.superbase.store_knowledge(
                                concept=concept,
                                description=f"Concepto mencionado en conversaci√≥n: {user_message[:100]}",
                                category='conversational',
                                source='user_interaction',
                                confidence=0.4
                            )
                        except Exception as e:
                            logger.error(f"Error almacenando en SuperBase: {e}")
                    
                    # Almacenar en embeddings como conocimiento estructurado
                    if self.embeddings_system:
                        try:
                            descripcion_extendida = f"Concepto '{concept}' extra√≠do de la conversaci√≥n: '{user_message}'. Contexto: Mencionado durante interacci√≥n del usuario en sesi√≥n {self.session_id[:8]}"
                            
                            self.embeddings_system.agregar_conocimiento(
                                concepto=concept,
                                descripcion=descripcion_extendida,
                                categoria='conversational_learning',
                                tags=['user_mentioned', 'auto_extracted', self.current_emotion],
                                confianza=0.4,
                                ejemplos=[user_message[:100]],
                                relaciones={
                                    'session_id': self.session_id,
                                    'conversation_context': user_message[:50],
                                    'related_concepts': key_concepts[:3]
                                }
                            )
                            
                            logger.info(f"üß† Concepto '{concept}' agregado a embeddings")
                            
                        except Exception as e:
                            logger.error(f"Error agregando concepto a embeddings: {e}")
            
            logger.info(f"üìö RETROALIMENTACI√ìN COMPLETADA - Sesi√≥n: {self.session_id[:8]}")
            logger.info(f"   üìä Conceptos procesados: {len(key_concepts)}")
            logger.info(f"   üß† Nuevos conceptos aprendidos: {len([c for c in key_concepts if c not in saludos_basicos])}")
            logger.info(f"   üóÑÔ∏è Cache actual: {len(self.knowledge_cache)} conceptos")
            print(f"üîÑ APRENDIZAJE ACTIVO: {len(key_concepts)} conceptos ‚Üí Cache: {len(self.knowledge_cache)}")
            
        except Exception as e:
            logger.error(f"Error en aprendizaje: {e}")
    
    def _extract_key_concepts(self, text: str) -> List[str]:
        """Extraer conceptos clave del texto"""
        # Palabras a ignorar
        stop_words = {'el', 'la', 'de', 'que', 'y', 'en', 'un', 'es', 'se', 'no', 'te', 'lo', 'le', 'da', 'su', 'por', 'son', 'con', 'para', 'como', 'pero', 'muy', 'todo', 'esta', 'fue', 'han', 'hasta'}
        
        # Limpiar texto y extraer palabras importantes
        words = re.findall(r'\b[a-z√°√©√≠√≥√∫√±]{3,}\b', text.lower())
        concepts = [word for word in words if word not in stop_words and len(word) > 3]
        
        # Buscar frases de 2-3 palabras
        phrases = []
        words_clean = text.lower().split()
        for i in range(len(words_clean) - 1):
            if len(words_clean[i]) > 3 and len(words_clean[i+1]) > 3:
                phrase = f"{words_clean[i]} {words_clean[i+1]}"
                if not any(stop in phrase for stop in stop_words):
                    phrases.append(phrase)
        
        return list(set(concepts + phrases))[:5]  # Top 5 √∫nicos
    
    def _get_suggested_topics(self, user_message: str) -> List[str]:
        """Obtener temas sugeridos relacionados"""
        suggestions = []
        
        try:
            # Buscar temas relacionados en el conocimiento
            if self.superbase:
                concepts = self._extract_key_concepts(user_message)
                for concept in concepts[:2]:  # Top 2
                    related = self.superbase.get_knowledge(concept=concept)
                    for item in related[:2]:
                        if item.get('concept') not in suggestions:
                            suggestions.append(item.get('concept', ''))
            
            # Agregar sugerencias generales si no hay suficientes
            general_suggestions = [
                "inteligencia artificial",
                "machine learning", 
                "programaci√≥n",
                "ciencia de datos",
                "tecnolog√≠a"
            ]
            
            for suggestion in general_suggestions:
                if len(suggestions) < 5 and suggestion not in suggestions:
                    suggestions.append(suggestion)
                    
        except Exception as e:
            logger.error(f"Error generando sugerencias: {e}")
        
        return suggestions[:3]  # Top 3
    
    def _create_error_response(self, error_msg: str) -> Dict[str, Any]:
        """Crear respuesta de error amigable"""
        return {
            'response': f"Disculpa, he tenido un peque√±o problema procesando tu mensaje. ü§ñüí≠ ¬øPodr√≠as intentar reformularlo?",
            'emotion': 'apologetic',
            'confidence': 0.2,
            'error': True,
            'error_details': error_msg if app.debug else None,
            'suggested_topics': ['inteligencia artificial', 'ayuda', 'informaci√≥n general']
        }
    
    def get_system_status(self) -> Dict[str, Any]:
        """Obtener estado del sistema"""
        uptime = (datetime.now(timezone.utc) - self.start_time).total_seconds()
        
        status = {
            'status': 'operational',
            'session_id': self.session_id[:8],
            'uptime_seconds': round(uptime, 2),
            'conversations_count': self.conversation_count,
            'current_emotion': self.current_emotion,
            'emotions': self.emotions,
            'superbase_connected': self.superbase is not None and getattr(self.superbase, 'connected', False),
            'knowledge_cache_size': len(self.knowledge_cache),
            'systems': {
                'superbase': SUPERBASE_AVAILABLE,
                'learning_system': LEARNING_SYSTEM_AVAILABLE,
                'spanish_apis': SPANISH_APIS_AVAILABLE
            }
        }
        
        # Agregar estad√≠sticas de Super Base si est√° disponible
        if self.superbase:
            try:
                db_stats = self.superbase.get_database_stats()
                status['database_stats'] = db_stats
            except Exception as e:
                status['database_error'] = str(e)
        
        return status


# Inicializar servidor
aria_server = ARIASuperServer()


# ==================== RUTAS DE LA API ====================

@app.route('/')
def home():
    """P√°gina principal con interfaz web"""
    return '''
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ ARIA - Asistente IA Personal</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem;
            text-align: center;
            color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .container {
            flex: 1;
            display: flex;
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
            gap: 2rem;
        }
        
        .chat-panel {
            flex: 2;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            min-height: 600px;
        }
        
        .controls-panel {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 2rem;
        }
        
        .chat-messages {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
            border-bottom: 1px solid #eee;
        }
        
        .chat-input-area {
            padding: 1.5rem;
            display: flex;
            gap: 1rem;
        }
        
        .chat-input {
            flex: 1;
            padding: 1rem;
            border: 2px solid #ddd;
            border-radius: 25px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.3s ease;
        }
        
        .chat-input:focus {
            border-color: #667eea;
        }
        
        .send-btn {
            padding: 1rem 2rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .send-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .control-btn {
            width: 100%;
            padding: 1rem;
            margin-bottom: 1rem;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .desktop-btn {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
            color: white;
        }
        
        .status-btn {
            background: linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%);
            color: white;
        }
        
        .knowledge-btn {
            background: linear-gradient(135deg, #ffeaa7 0%, #fdcb6e 100%);
            color: #2d3436;
        }
        
        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .message {
            margin-bottom: 1rem;
            padding: 1rem;
            border-radius: 10px;
            max-width: 80%;
        }
        
        .user-message {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin-left: auto;
        }
        
        .aria-message {
            background: #f8f9fa;
            color: #2d3436;
            border-left: 4px solid #667eea;
        }
        
        .system-message {
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            color: #8b4513;
            border-left: 4px solid #ff6b6b;
            font-size: 0.9rem;
            font-style: italic;
        }
        
        .status-info {
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid #4caf50;
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 1rem;
        }
        
        .status-info h3 {
            color: #4caf50;
            margin-bottom: 0.5rem;
        }
        
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                margin: 1rem;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>ü§ñ ARIA</h1>
        <p>Asistente de IA Personal con Super Base</p>
    </div>
    
    <div class="container">
        <div class="chat-panel">
            <div class="chat-messages" id="chatMessages">
                <div class="message aria-message">
                    <strong>ü§ñ ARIA:</strong> ¬°Hola! Soy ARIA, tu asistente de IA personal. ¬øEn qu√© puedo ayudarte hoy?
                </div>
            </div>
            <div class="chat-input-area">
                <input type="text" class="chat-input" id="chatInput" placeholder="Escribe tu mensaje aqu√≠..." />
                <button class="send-btn" onclick="sendMessage()">Enviar</button>
            </div>
        </div>
        
        <div class="controls-panel">
            <h3 style="margin-bottom: 1.5rem; color: #2d3436;">üéõÔ∏è Panel de Control</h3>
            
            <button class="control-btn desktop-btn" onclick="openRemoteDesktop()">
                üñ•Ô∏è Escritorio Remoto
            </button>
            
            <button class="control-btn status-btn" onclick="checkStatus()">
                üìä Estado del Sistema
            </button>
            
            <button class="control-btn knowledge-btn" onclick="viewKnowledge()">
                üìö Base de Conocimiento
            </button>
            
            <button class="control-btn" style="background: linear-gradient(135deg, #00b894 0%, #00a085 100%); color: white;" onclick="showLearningMonitor()">
                üîç Monitor de Retroalimentaci√≥n
            </button>
            
            <button class="control-btn" style="background: linear-gradient(135deg, #e17055 0%, #d63031 100%); color: white;" onclick="testSpanishAPIs()">
                üá™üá∏ Probar APIs Espa√±olas
            </button>
            
            <div class="status-info">
                <h3>üì° Estado Actual</h3>
                <p id="serverStatus">üü¢ Servidor activo</p>
                <p id="connectionStatus">üü¢ Conectado a Supabase</p>
            </div>
        </div>
    </div>
    
    <script>
        // Variables globales
        let chatMessages = document.getElementById('chatMessages');
        let chatInput = document.getElementById('chatInput');
        
        // Funci√≥n para enviar mensajes
        async function sendMessage() {
            const message = chatInput.value.trim();
            if (!message) return;
            
            // Mostrar mensaje del usuario
            addMessage(message, 'user');
            chatInput.value = '';
            
            // Mostrar indicador de carga
            addMessage('‚è≥ Procesando...', 'aria', true);
            
            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                });
                
                const data = await response.json();
                
                // Quitar indicador de carga
                removeLoadingMessage();
                
                if (data.response) {
                    addMessage(data.response, 'aria');
                    
                    // Mostrar informaci√≥n de retroalimentaci√≥n si est√° disponible
                    if (data.learning_feedback) {
                        const feedback = data.learning_feedback;
                        if (feedback.new_concepts_learned > 0) {
                            const feedbackMsg = `üß† RETROALIMENTACI√ìN: +${feedback.new_concepts_learned} nuevos conceptos aprendidos | Total en cache: ${feedback.total_knowledge_cache}`;
                            addMessage(feedbackMsg, 'system');
                        }
                    }
                    
                    // Mostrar insights de aprendizaje si est√°n disponibles
                    if (data.learning_insights && data.learning_insights.length > 0) {
                        const insightsMsg = 'üí° INSIGHTS DE APRENDIZAJE:\\n' + data.learning_insights.join('\\n');
                        addMessage(insightsMsg, 'system');
                    }
                } else {
                    addMessage('‚ùå Error al procesar el mensaje', 'aria');
                }
            } catch (error) {
                removeLoadingMessage();
                addMessage('‚ùå Error de conexi√≥n', 'aria');
                console.error('Error:', error);
            }
        }
        
        // Funci√≥n para agregar mensajes
        function addMessage(text, sender, isLoading = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            if (isLoading) messageDiv.id = 'loadingMessage';
            
            let icon;
            if (sender === 'user') {
                icon = 'üë§';
            } else if (sender === 'system') {
                icon = 'ÔøΩ SISTEMA:';
            } else {
                icon = 'ü§ñ ARIA:';
            }
            
            messageDiv.innerHTML = `<strong>${icon}</strong> ${text}`;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Funci√≥n para quitar mensaje de carga
        function removeLoadingMessage() {
            const loadingMsg = document.getElementById('loadingMessage');
            if (loadingMsg) loadingMsg.remove();
        }
        
        // Funci√≥n para abrir escritorio remoto
        function openRemoteDesktop() {
            const hostname = window.location.hostname;
            const rdpUrl = `ms-rd:full address:s:${hostname}:3389&username:s:&audiomode:i:0&disable wallpaper:i:0`;
            
            // Intentar abrir RDP directamente
            try {
                window.location.href = rdpUrl;
            } catch (error) {
                // Fallback: mostrar instrucciones
                addMessage(`üñ•Ô∏è Para conectar por escritorio remoto:
                
üìç Direcci√≥n: ${hostname}:3389
üîë Usuario: [tu usuario]
üóùÔ∏è Contrase√±a: [tu contrase√±a]

üí° Tambi√©n puedes usar:
‚Ä¢ Escritorio remoto de Windows (mstsc)
‚Ä¢ TeamViewer
‚Ä¢ AnyDesk`, 'aria');
            }
        }
        
        // Funci√≥n para verificar estado
        async function checkStatus() {
            try {
                const response = await fetch('/status');
                const data = await response.json();
                
                let statusText = 'üìä Estado del Sistema:\\n\\n';
                statusText += `üîå Super Base: ${data.superbase_connected ? '‚úÖ Conectado' : '‚ùå Desconectado'}\\n`;
                statusText += `üß† Sistema de Aprendizaje: ${data.systems?.learning_system ? '‚úÖ Activo' : '‚ùå Inactivo'}\\n`;
                statusText += `üåê APIs Espa√±olas: ${data.systems?.spanish_apis ? '‚úÖ Activas' : '‚ùå Inactivas'}\\n`;
                statusText += `üí¨ Conversaciones: ${data.conversations_count || 0}\\n`;
                statusText += `‚è±Ô∏è Tiempo activo: ${Math.round(data.uptime_seconds || 0)} segundos`;
                
                addMessage(statusText, 'aria');
            } catch (error) {
                addMessage('‚ùå Error al obtener el estado del sistema', 'aria');
            }
        }
        
        // Funci√≥n para ver conocimiento
        async function viewKnowledge() {
            try {
                const response = await fetch('/knowledge?limit=5');
                const data = await response.json();
                
                if (data.success && data.knowledge && data.knowledge.length > 0) {
                    let knowledgeText = 'üìö Base de Conocimiento (√∫ltimas 5 entradas):\\n\\n';
                    data.knowledge.forEach((item, index) => {
                        // Usar concept o concepto seg√∫n lo que est√© disponible
                        const concept = item.concept || item.concepto || 'Sin t√≠tulo';
                        const description = item.description || item.descripcion || 'Sin descripci√≥n';
                        
                        knowledgeText += `${index + 1}. ${concept}\\n`;
                        knowledgeText += `   üìù ${description.substring(0, 100)}...\\n\\n`;
                    });
                    knowledgeText += `üí° Total de entradas: ${data.total}`;
                    addMessage(knowledgeText, 'aria');
                } else if (data.success) {
                    addMessage('üìö No hay conocimiento almacenado a√∫n', 'aria');
                } else {
                    addMessage(`‚ùå Error: ${data.message || 'No se pudo obtener el conocimiento'}`, 'aria');
                }
            } catch (error) {
                addMessage('‚ùå Error al obtener el conocimiento', 'aria');
                console.error('Error en viewKnowledge:', error);
            }
        }
        
        // Funci√≥n para probar APIs espa√±olas
        async function testSpanishAPIs() {
            const testQuery = prompt('¬øQu√© quieres buscar con las APIs espa√±olas?', 'Madrid Espa√±a');
            if (!testQuery) return;
            
            addMessage(`üá™üá∏ Probando APIs espa√±olas con: "${testQuery}"...`, 'aria');
            
            try {
                const response = await fetch(`/spanish-apis-test?q=${encodeURIComponent(testQuery)}`);
                const data = await response.json();
                
                if (data.success) {
                    let resultText = `üá™üá∏ Resultados de APIs Espa√±olas para "${testQuery}":
                    
üìä **Estado de APIs:**`;
                    
                    for (const [apiName, status] of Object.entries(data.api_status.apis)) {
                        const icon = status.enabled ? '‚úÖ' : '‚ùå';
                        resultText += `
${icon} ${apiName}: ${status.description}`;
                    }
                    
                    resultText += `

üìÑ **Resumen:**
${data.results.summary}

üîç **Fuentes consultadas:** ${data.results.sources.length}`;
                    
                    addMessage(resultText, 'aria');
                } else {
                    addMessage(`‚ùå Error: ${data.message || 'APIs espa√±olas no disponibles'}`, 'aria');
                }
            } catch (error) {
                addMessage('‚ùå Error al probar APIs espa√±olas', 'aria');
                console.error('Error:', error);
            }
        }
        
        // Funci√≥n para mostrar monitoreo de retroalimentaci√≥n
        async function showLearningMonitor() {
            try {
                const response = await fetch('/learning/monitor');
                const data = await response.json();
                
                if (data.success) {
                    let monitorText = 'üîç MONITOR DE RETROALIMENTACI√ìN EN TIEMPO REAL\\n\\n';
                    
                    // Estado del sistema de aprendizaje
                    const stats = data.learning_stats;
                    monitorText += `üìä **Estado del Sistema:**\\n`;
                    monitorText += `   üß† Aprendizaje: ${stats.learning_system_active ? '‚úÖ Activo' : '‚ùå Inactivo'}\\n`;
                    monitorText += `   üìö Conceptos en Cache: ${stats.knowledge_cache_size}\\n`;
                    monitorText += `   üåê APIs Espa√±olas: ${stats.spanish_apis_available ? '‚úÖ Activas' : '‚ùå Inactivas'}\\n`;
                    monitorText += `   üé≠ Sesi√≥n ID: ${stats.session_id}\\n\\n`;
                    
                    // √öltimos conceptos aprendidos
                    const recentConcepts = data.recent_concepts || [];
                    if (recentConcepts.length > 0) {
                        monitorText += `üî• **√öltimos Conceptos Aprendidos:**\\n`;
                        recentConcepts.slice(-5).forEach((concept, index) => {
                            const confidenceIcon = concept.confidence > 0.7 ? 'üü¢' : 
                                                   concept.confidence > 0.4 ? 'üü°' : 'üî¥';
                            monitorText += `   ${index + 1}. ${concept.concept} ${confidenceIcon}\\n`;
                            monitorText += `      üìÇ ${concept.category} | üìà ${(concept.confidence * 100).toFixed(0)}%\\n`;
                        });
                        monitorText += '\\n';
                    } else {
                        monitorText += 'üìù No hay conceptos recientes en cache\\n\\n';
                    }
                    
                    // Estad√≠sticas de base de datos
                    const dbStats = data.database_stats;
                    if (dbStats && dbStats.total_knowledge) {
                        monitorText += `üóÑÔ∏è **Base de Datos:**\\n`;
                        monitorText += `   üìä Total de conocimiento: ${dbStats.total_knowledge}\\n`;
                        if (dbStats.recent_additions && dbStats.recent_additions.length > 0) {
                            monitorText += `   üÜï √öltimas adiciones: ${dbStats.recent_additions.length}\\n`;
                        }
                        monitorText += '\\n';
                    }
                    
                    monitorText += 'üí° **Leyenda:**\\n';
                    monitorText += 'üü¢ Alta confianza (>70%)  üü° Media (40-70%)  üî¥ Baja (<40%)\\n';
                    monitorText += 'üìö Cache = Conceptos temporales  üóÑÔ∏è BD = Conocimiento persistente';
                    
                    addMessage(monitorText, 'aria');
                } else {
                    addMessage('‚ùå Error al obtener datos de monitoreo', 'aria');
                }
            } catch (error) {
                addMessage('‚ùå Error conectando con el monitor de aprendizaje', 'aria');
                console.error('Error:', error);
            }
        }
        
        // Event listener para Enter
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // Actualizar estado cada 30 segundos
        setInterval(async () => {
            try {
                const response = await fetch('/status');
                const data = await response.json();
                
                document.getElementById('serverStatus').textContent = 
                    data.superbase_connected ? 'üü¢ Servidor activo' : 'üü° Servidor limitado';
                document.getElementById('connectionStatus').textContent = 
                    data.superbase_connected ? 'üü¢ Conectado a Supabase' : 'üî¥ Sin conexi√≥n DB';
            } catch (error) {
                document.getElementById('serverStatus').textContent = 'üî¥ Error de conexi√≥n';
            }
        }, 30000);
    </script>
</body>
</html>
    '''

@app.route('/api')
def api_info():
    """Informaci√≥n de la API en formato JSON"""
    return jsonify({
        'message': 'ü§ñ ARIA Super Server est√° funcionando',
        'version': '2.0.0',
        'features': ['Super Base', 'Multilingual APIs', 'Advanced Learning'],
        'endpoints': ['/chat', '/status', '/knowledge', '/api-relations']
    })

@app.route('/chat', methods=['POST'])
def chat():
    """Endpoint principal de chat"""
    try:
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({'error': 'Mensaje requerido'}), 400
        
        user_message = data['message'].strip()
        if not user_message:
            return jsonify({'error': 'Mensaje vac√≠o'}), 400
        
        # üìä Estado antes del procesamiento
        cache_before = len(aria_server.knowledge_cache)
        
        context = data.get('context', {})
        response = aria_server.process_message(user_message, context)
        
        # üìä Estado despu√©s del procesamiento 
        cache_after = len(aria_server.knowledge_cache)
        
        # üîÑ Agregar informaci√≥n de retroalimentaci√≥n al response
        response['learning_feedback'] = {
            'learning_active': LEARNING_SYSTEM_AVAILABLE,
            'concepts_before': cache_before,
            'concepts_after': cache_after,
            'new_concepts_learned': cache_after - cache_before,
            'session_id': aria_server.session_id[:8],
            'total_knowledge_cache': cache_after
        }
        
        # üìù Log detallado en consola
        if cache_after > cache_before:
            print(f"üß† NUEVO APRENDIZAJE: +{cache_after - cache_before} conceptos | Total: {cache_after}")
        else:
            print(f"üîç CONSULTA PROCESADA: {cache_after} conceptos en cache")
        
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Error en /chat: {e}")
        return jsonify({'error': 'Error interno del servidor'}), 500

@app.route('/status')
def status():
    """Estado del sistema"""
    return jsonify(aria_server.get_system_status())

@app.route('/spanish-apis-test')
def spanish_apis_test():
    """Probar APIs espa√±olas"""
    try:
        if not SPANISH_APIS_AVAILABLE:
            return jsonify({
                'success': False,
                'message': 'APIs espa√±olas no disponibles'
            })
        
        query = request.args.get('q', 'Madrid')
        results = aria_spanish_apis.search_comprehensive(query, max_results=3)
        
        return jsonify({
            'success': True,
            'query': query,
            'results': results,
            'api_status': aria_spanish_apis.get_api_status()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/learning/monitor')
def learning_monitor():
    """Monitor en tiempo real del sistema de aprendizaje"""
    try:
        # Estad√≠sticas de aprendizaje
        stats = {
            'learning_system_active': LEARNING_SYSTEM_AVAILABLE,
            'session_id': aria_server.session_id,
            'knowledge_cache_size': len(aria_server.knowledge_cache),
            'embeddings_available': EMBEDDINGS_AVAILABLE,
            'spanish_apis_available': SPANISH_APIS_AVAILABLE
        }
        
        # √öltimos conceptos aprendidos del cache
        recent_concepts = []
        for concept, data in list(aria_server.knowledge_cache.items())[-10:]:
            recent_concepts.append({
                'concept': concept,
                'category': data.get('category', 'unknown'),
                'confidence': data.get('confidence', 0),
                'source': data.get('source', 'unknown')
            })
        
        # Estad√≠sticas de base de datos
        db_stats = {}
        if aria_server.superbase:
            try:
                knowledge_count = aria_server.superbase.client.table('aria_knowledge').select('id').execute()
                db_stats['total_knowledge'] = len(knowledge_count.data)
                
                # √öltimos 5 conocimientos agregados
                recent_knowledge = aria_server.superbase.client.table('aria_knowledge').select('*').order('created_at', desc=True).limit(5).execute()
                db_stats['recent_additions'] = recent_knowledge.data
            except Exception as e:
                db_stats['error'] = f'No se pudo acceder a estad√≠sticas de BD: {str(e)}'
        
        return jsonify({
            'success': True,
            'timestamp': datetime.now().isoformat(),
            'learning_stats': stats,
            'recent_concepts': recent_concepts,
            'database_stats': db_stats,
            'monitoring_enabled': True
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/knowledge')
def knowledge():
    """Obtener conocimiento almacenado"""
    try:
        category = request.args.get('category')
        concept = request.args.get('concept')
        limit = int(request.args.get('limit', 10))
        
        logger.info(f"Solicitud de conocimiento: concept={concept}, category={category}, limit={limit}")
        
        if aria_server.superbase:
            knowledge_data = aria_server.superbase.get_knowledge(concept, category)
            logger.info(f"Datos obtenidos de Supabase: {len(knowledge_data)} entradas")
            
            # Log de muestra de los primeros datos
            if knowledge_data:
                logger.info(f"Muestra de datos: {knowledge_data[0].keys() if knowledge_data else 'Sin datos'}")
            
            return jsonify({
                'success': True,
                'knowledge': knowledge_data[:limit],
                'total': len(knowledge_data)
            })
        else:
            logger.warning("Super Base no disponible, usando cache local")
            cache_data = list(aria_server.knowledge_cache.values())[:limit]
            return jsonify({
                'success': True,
                'message': 'Usando cache local (Super Base no disponible)',
                'knowledge': cache_data,
                'total': len(cache_data)
            })
            
    except Exception as e:
        logger.error(f"Error en /knowledge: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/knowledge', methods=['POST'])
def add_knowledge():
    """Agregar nuevo conocimiento"""
    try:
        data = request.get_json()
        required_fields = ['concept', 'description']
        
        if not all(field in data for field in required_fields):
            return jsonify({'error': 'Campos requeridos: concept, description'}), 400
        
        if aria_server.superbase:
            success = aria_server.superbase.store_knowledge(
                concept=data['concept'],
                description=data['description'],
                category=data.get('category', 'user_added'),
                source='api_endpoint',
                confidence=data.get('confidence', 0.7)
            )
            
            if success:
                # Actualizar cache
                aria_server.knowledge_cache[data['concept']] = data
                return jsonify({'success': True, 'message': 'Conocimiento agregado'})
            else:
                return jsonify({'success': False, 'message': 'Error almacenando'}), 500
        else:
            # Almacenar en cache local
            aria_server.knowledge_cache[data['concept']] = data
            return jsonify({'success': True, 'message': 'Conocimiento agregado localmente'})
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api-relations')
def api_relations():
    """Obtener relaciones de APIs"""
    try:
        api_type = request.args.get('type')
        
        if aria_server.superbase:
            apis = aria_server.superbase.get_api_relations(api_type)
            return jsonify({
                'success': True,
                'apis': apis,
                'total': len(apis)
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Super Base no disponible',
                'apis': []
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/conversations')
def conversations():
    """Obtener historial de conversaciones"""
    try:
        session_id = request.args.get('session_id')
        limit = int(request.args.get('limit', 10))
        
        if aria_server.superbase:
            history = aria_server.superbase.get_conversation_history(session_id, limit)
            return jsonify({
                'success': True,
                'conversations': history,
                'session_id': session_id or 'all'
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Super Base no disponible',
                'conversations': []
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/emotions/stats')
def emotion_stats():
    """Obtener estad√≠sticas del sistema emocional"""
    try:
        if aria_server.emotion_system_type == "supabase":
            stats = get_emotion_stats_supabase()
            return jsonify({
                'success': True,
                'emotion_system': 'supabase',
                'stats': stats,
                'current_emotion': aria_server.current_emotion,
                'emotion_values': aria_server.emotions
            })
        else:
            return jsonify({
                'success': True,
                'emotion_system': aria_server.emotion_system_type,
                'current_emotion': aria_server.current_emotion,
                'emotion_values': aria_server.emotions,
                'stats': {
                    'system_type': aria_server.emotion_system_type,
                    'fallback_active': True
                }
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/emotions/available')
def available_emotions():
    """Obtener emociones disponibles"""
    try:
        if aria_server.emotion_system_type == "supabase" and aria_server.emotion_detector:
            emotions = aria_server.emotion_detector.get_available_emotions()
            return jsonify({
                'success': True,
                'emotions': emotions,
                'total': len(emotions),
                'source': 'supabase'
            })
        else:
            return jsonify({
                'success': True,
                'emotions': [
                    {'key': 'neutral', 'name': 'Neutral', 'color': '#667eea'},
                    {'key': 'happy', 'name': 'Feliz', 'color': '#FFD700'},
                    {'key': 'curious', 'name': 'Curiosa', 'color': '#00CED1'},
                    {'key': 'learning', 'name': 'Aprendiendo', 'color': '#00FF7F'}
                ],
                'total': 4,
                'source': 'fallback'
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500
        return jsonify({'error': str(e)}), 500

@app.route('/search')
def search():
    """B√∫squeda avanzada en conocimiento"""
    try:
        query = request.args.get('q', '').strip()
        if not query:
            return jsonify({'error': 'Par√°metro q requerido'}), 400
        
        if aria_server.superbase:
            results = aria_server.superbase.search_knowledge(query)
            return jsonify({
                'success': True,
                'query': query,
                'results': results,
                'total': len(results)
            })
        else:
            # B√∫squeda en cache local
            results = []
            for concept, data in aria_server.knowledge_cache.items():
                if query.lower() in concept.lower() or query.lower() in data.get('description', '').lower():
                    results.append(data)
            
            return jsonify({
                'success': True,
                'query': query,
                'results': results,
                'total': len(results),
                'source': 'local_cache'
            })
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/embeddings/search')
def embeddings_search():
    """B√∫squeda sem√°ntica usando embeddings"""
    try:
        query = request.args.get('q', '').strip()
        limite = int(request.args.get('limit', 5))
        categoria = request.args.get('category', None)
        umbral = float(request.args.get('threshold', 0.6))
        
        if not query:
            return jsonify({'error': 'Par√°metro q requerido'}), 400
        
        if not aria_server.embeddings_system:
            return jsonify({'error': 'Sistema de embeddings no disponible'}), 503
        
        # Buscar similares
        resultados = aria_server.embeddings_system.buscar_similares(
            consulta=query,
            limite=limite,
            categoria=categoria,
            umbral_similitud=umbral
        )
        
        return jsonify({
            'success': True,
            'query': query,
            'results': resultados,
            'total': len(resultados),
            'source': 'embeddings_supabase',
            'parameters': {
                'limit': limite,
                'category': categoria,
                'threshold': umbral
            }
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/embeddings/knowledge')
def embeddings_knowledge_search():
    """B√∫squeda de conocimiento estructurado con embeddings"""
    try:
        query = request.args.get('q', '').strip()
        limite = int(request.args.get('limit', 3))
        
        if not query:
            return jsonify({'error': 'Par√°metro q requerido'}), 400
        
        if not aria_server.embeddings_system:
            return jsonify({'error': 'Sistema de embeddings no disponible'}), 503
        
        # Buscar conocimiento
        resultados = aria_server.embeddings_system.buscar_conocimiento(query, limite)
        
        return jsonify({
            'success': True,
            'query': query,
            'knowledge': resultados,
            'total': len(resultados),
            'source': 'knowledge_vectors'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/embeddings/stats')
def embeddings_stats():
    """Obtener estad√≠sticas del sistema de embeddings"""
    try:
        if not aria_server.embeddings_system:
            return jsonify({'error': 'Sistema de embeddings no disponible'}), 503
        
        stats = aria_server.embeddings_system.obtener_estadisticas()
        
        return jsonify({
            'success': True,
            'stats': stats,
            'embeddings_system': 'supabase',
            'model': 'all-MiniLM-L6-v2',
            'dimensions': 384
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/embeddings/add', methods=['POST'])
def embeddings_add():
    """Agregar texto con embedding"""
    try:
        data = request.get_json()
        
        if not data or 'texto' not in data:
            return jsonify({'error': 'Campo texto requerido'}), 400
        
        if not aria_server.embeddings_system:
            return jsonify({'error': 'Sistema de embeddings no disponible'}), 503
        
        # Par√°metros opcionales
        texto = data['texto']
        categoria = data.get('categoria', 'manual')
        subcategoria = data.get('subcategoria', None)
        fuente = data.get('fuente', 'api_manual')
        idioma = data.get('idioma', 'es')
        metadatos = data.get('metadatos', {})
        
        # Agregar timestamp
        metadatos['added_via'] = 'api'
        metadatos['timestamp'] = datetime.now(timezone.utc).isoformat()
        
        # Agregar el texto
        success = aria_server.embeddings_system.agregar_texto(
            texto=texto,
            categoria=categoria,
            subcategoria=subcategoria,
            fuente=fuente,
            idioma=idioma,
            metadatos=metadatos
        )
        
        if success:
            return jsonify({
                'success': True,
                'message': 'Texto agregado exitosamente',
                'data': {
                    'texto': texto[:100] + '...' if len(texto) > 100 else texto,
                    'categoria': categoria,
                    'subcategoria': subcategoria
                }
            })
        else:
            return jsonify({'error': 'Error agregando texto'}), 500
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/embeddings/knowledge', methods=['POST'])
def embeddings_add_knowledge():
    """Agregar conocimiento estructurado con embedding"""
    try:
        data = request.get_json()
        
        if not data or 'concepto' not in data or 'descripcion' not in data:
            return jsonify({'error': 'Campos concepto y descripcion requeridos'}), 400
        
        if not aria_server.embeddings_system:
            return jsonify({'error': 'Sistema de embeddings no disponible'}), 503
        
        # Par√°metros
        concepto = data['concepto']
        descripcion = data['descripcion']
        categoria = data.get('categoria', 'manual_knowledge')
        tags = data.get('tags', [])
        confianza = float(data.get('confianza', 0.8))
        ejemplos = data.get('ejemplos', [])
        relaciones = data.get('relaciones', {})
        
        # Agregar metadatos de API
        relaciones['added_via'] = 'api'
        relaciones['timestamp'] = datetime.now(timezone.utc).isoformat()
        
        # Agregar el conocimiento
        success = aria_server.embeddings_system.agregar_conocimiento(
            concepto=concepto,
            descripcion=descripcion,
            categoria=categoria,
            tags=tags,
            confianza=confianza,
            ejemplos=ejemplos,
            relaciones=relaciones
        )
        
        if success:
            return jsonify({
                'success': True,
                'message': 'Conocimiento agregado exitosamente',
                'data': {
                    'concepto': concepto,
                    'categoria': categoria,
                    'confianza': confianza,
                    'tags': tags
                }
            })
        else:
            return jsonify({'error': 'Error agregando conocimiento'}), 500
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# Servir archivos est√°ticos del frontend React
@app.route('/static/<path:filename>')
def serve_static(filename):
    """Servir archivos est√°ticos del frontend"""
    return send_from_directory('../frontend/build/static', filename)

# Ruta catch-all para el frontend React
@app.route('/<path:path>')
def serve_frontend(path):
    """Servir frontend React para rutas no API"""
    try:
        return send_from_directory('../frontend/build', path)
    except:
        return send_from_directory('../frontend/build', 'index.html')


if __name__ == '__main__':
    print("\n" + "="*60)
    print("üöÄ ARIA SUPER SERVER - Iniciando...")
    print("="*60)
    
    # Mostrar configuraci√≥n
    print(f"üóÑÔ∏è Super Base: {'‚úÖ Conectado' if SUPERBASE_AVAILABLE else '‚ùå No disponible'}")
    print(f"üß† Sistema de Aprendizaje: {'‚úÖ Activo' if LEARNING_SYSTEM_AVAILABLE else '‚ùå No disponible'}")
    print(f"üåê APIs Espa√±olas: {'‚úÖ Activas' if SPANISH_APIS_AVAILABLE else '‚ùå No disponibles'}")
    print(f"üé≠ Sesi√≥n ID: {aria_server.session_id[:8]}")
    
    if aria_server.superbase and aria_server.superbase.connected:
        stats = aria_server.superbase.get_database_stats()
        print(f"üìä Base de Datos:")
        print(f"   üìö Conocimiento: {stats.get('knowledge_count', 0)} entradas")
        print(f"   üîå APIs: {stats.get('api_relations_count', 0)} relaciones")
        print(f"   üí¨ Conversaciones: {stats.get('conversations_count', 0)} registros")
    
    print("\nüåê Endpoints disponibles:")
    print("   GET  / - Informaci√≥n del servidor")
    print("   POST /chat - Chat con ARIA")
    print("   GET  /status - Estado del sistema")
    print("   GET  /knowledge - Consultar conocimiento")
    print("   POST /knowledge - Agregar conocimiento")
    print("   GET  /api-relations - Ver APIs conectadas")
    print("   GET  /conversations - Historial")
    print("   GET  /search?q=texto - B√∫squeda avanzada")
    
    print("\nüöÄ Servidor iniciado en http://localhost:8000")
    print("="*60)
    
    # Iniciar servidor
    try:
        app.run(
            host='0.0.0.0',
            port=8000,
            debug=False,  # Desactivar debug para evitar problemas
            threaded=True,
            use_reloader=False  # Evitar recarga autom√°tica que puede causar colgones
        )
    except Exception as e:
        print(f"\n‚ùå Error al iniciar el servidor: {e}")
        print("   El servidor puede estar ya ejecut√°ndose en el puerto 8000")
        print("   Intenta cerrar otros procesos o usar un puerto diferente")