#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ ARIA - Restaurador de √çcono del Escritorio
Recrear el acceso directo de ARIA en el escritorio
"""

import os
import sys
import winshell
from win32com.client import Dispatch
from pathlib import Path

def crear_icono_aria():
    """Crear √≠cono de ARIA en el escritorio"""
    print("üéØ ARIA - Restaurador de √çcono del Escritorio")
    print("=" * 60)
    
    try:
        # Rutas importantes
        project_dir = Path(__file__).parent.absolute()
        desktop = winshell.desktop()
        
        # Archivo launcher principal
        launcher_bat = project_dir / "INICIAR_ARIA_FINAL.bat"
        launcher_ps1 = project_dir / "INICIAR_ARIA_FINAL.ps1"
        menu_principal = project_dir / "ARIA_MENU_PRINCIPAL.bat"
        
        # Verificar que existen los launchers
        if not launcher_bat.exists() and not launcher_ps1.exists() and not menu_principal.exists():
            print("‚ùå No se encontraron archivos launcher de ARIA")
            return False
        
        # Crear acceso directo para el men√∫ principal (preferido)
        if menu_principal.exists():
            target_file = str(menu_principal)
            shortcut_name = "ü§ñ ARIA - Asistente IA"
            description = "ARIA - Asistente de Inteligencia Artificial Futurista"
        elif launcher_bat.exists():
            target_file = str(launcher_bat)
            shortcut_name = "ü§ñ ARIA - Launcher"
            description = "ARIA - Iniciar Asistente de IA"
        else:
            target_file = str(launcher_ps1)
            shortcut_name = "ü§ñ ARIA - PowerShell"
            description = "ARIA - Iniciar con PowerShell"
        
        # Ruta del acceso directo
        shortcut_path = os.path.join(desktop, f"{shortcut_name}.lnk")
        
        print(f"üìÅ Directorio proyecto: {project_dir}")
        print(f"üñ•Ô∏è Escritorio: {desktop}")
        print(f"üéØ Archivo objetivo: {target_file}")
        print(f"üîó Acceso directo: {shortcut_path}")
        
        # Crear el acceso directo
        shell = Dispatch('WScript.Shell')
        shortcut = shell.CreateShortCut(shortcut_path)
        shortcut.Targetpath = target_file
        shortcut.WorkingDirectory = str(project_dir)
        shortcut.Description = description
        
        # Buscar un √≠cono personalizado
        icon_paths = [
            project_dir / "assets" / "icons" / "aria_icon.ico",
            project_dir / "assets" / "aria.ico",
            project_dir / "aria_icon.ico",
            project_dir / "icon.ico"
        ]
        
        icon_found = False
        for icon_path in icon_paths:
            if icon_path.exists():
                shortcut.IconLocation = str(icon_path)
                icon_found = True
                print(f"üé® √çcono encontrado: {icon_path}")
                break
        
        if not icon_found:
            # Usar √≠cono del sistema para aplicaciones
            shortcut.IconLocation = "shell32.dll,1"  # √çcono de aplicaci√≥n
            print("üé® Usando √≠cono del sistema")
        
        # Guardar el acceso directo
        shortcut.save()
        
        print("‚úÖ Acceso directo creado exitosamente")
        print(f"üîó Ubicaci√≥n: {shortcut_path}")
        
        # Verificar que se cre√≥
        if os.path.exists(shortcut_path):
            print("‚úÖ √çcono de ARIA restaurado en el escritorio")
            return True
        else:
            print("‚ùå Error: No se pudo crear el acceso directo")
            return False
            
    except Exception as e:
        print(f"‚ùå Error creando √≠cono: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def crear_icono_personalizado():
    """Crear un √≠cono personalizado para ARIA si no existe"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        project_dir = Path(__file__).parent.absolute()
        assets_dir = project_dir / "assets" / "icons"
        assets_dir.mkdir(parents=True, exist_ok=True)
        
        icon_path = assets_dir / "aria_icon.ico"
        
        if icon_path.exists():
            print(f"‚úÖ √çcono personalizado ya existe: {icon_path}")
            return str(icon_path)
        
        print("üé® Creando √≠cono personalizado para ARIA...")
        
        # Crear imagen 256x256 para el √≠cono
        size = 256
        image = Image.new('RGBA', (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # Fondo circular azul futurista
        center = size // 2
        radius = size // 2 - 10
        draw.ellipse([center-radius, center-radius, center+radius, center+radius], 
                    fill=(0, 120, 255, 255), outline=(0, 80, 200, 255), width=4)
        
        # C√≠rculo interno
        inner_radius = radius - 30
        draw.ellipse([center-inner_radius, center-inner_radius, center+inner_radius, center+inner_radius], 
                    fill=(20, 140, 255, 180))
        
        # Texto "AI" en el centro
        try:
            font_size = 80
            # Intentar usar una fuente del sistema
            try:
                font = ImageFont.truetype("arial.ttf", font_size)
            except:
                font = ImageFont.load_default()
        except:
            font = ImageFont.load_default()
        
        text = "AI"
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        text_x = center - text_width // 2
        text_y = center - text_height // 2
        
        # Sombra del texto
        draw.text((text_x + 2, text_y + 2), text, font=font, fill=(0, 0, 0, 128))
        # Texto principal
        draw.text((text_x, text_y), text, font=font, fill=(255, 255, 255, 255))
        
        # Efectos futuristas (l√≠neas)
        for i in range(8):
            angle = i * 45
            import math
            x1 = center + int((radius - 20) * math.cos(math.radians(angle)))
            y1 = center + int((radius - 20) * math.sin(math.radians(angle)))
            x2 = center + int((radius - 5) * math.cos(math.radians(angle)))
            y2 = center + int((radius - 5) * math.sin(math.radians(angle)))
            draw.line([x1, y1, x2, y2], fill=(255, 255, 255, 200), width=3)
        
        # Guardar como ICO
        # Para ICO necesitamos varios tama√±os
        sizes = [16, 32, 48, 64, 128, 256]
        images = []
        
        for s in sizes:
            resized = image.resize((s, s), Image.Resampling.LANCZOS)
            images.append(resized)
        
        # Guardar como ICO
        images[0].save(str(icon_path), format='ICO', sizes=[(s, s) for s in sizes])
        
        print(f"‚úÖ √çcono personalizado creado: {icon_path}")
        return str(icon_path)
        
    except ImportError:
        print("‚ö†Ô∏è PIL no disponible, usando √≠cono del sistema")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è Error creando √≠cono personalizado: {e}")
        return None

def main():
    """Funci√≥n principal"""
    print("üéØ ARIA - Restauraci√≥n de √çcono del Escritorio")
    print("=" * 60)
    
    # Verificar dependencias
    try:
        import winshell
        import win32com.client
    except ImportError as e:
        print(f"‚ùå Falta dependencia: {e}")
        print("üí° Instalando dependencias necesarias...")
        os.system("pip install pywin32 winshell")
        try:
            import winshell
            import win32com.client
            print("‚úÖ Dependencias instaladas")
        except ImportError:
            print("‚ùå No se pudieron instalar las dependencias")
            print("üí° Ejecuta manualmente: pip install pywin32 winshell")
            return False
    
    # Crear √≠cono personalizado si es posible
    try:
        crear_icono_personalizado()
    except:
        pass
    
    # Crear acceso directo
    success = crear_icono_aria()
    
    if success:
        print("\nüéâ ¬°√çcono de ARIA restaurado exitosamente!")
        print("‚úÖ Ahora puedes ver el √≠cono de ARIA en tu escritorio")
        print("üöÄ Haz doble clic para iniciar ARIA")
    else:
        print("\n‚ùå No se pudo restaurar el √≠cono")
        print("üí° Intenta ejecutar como administrador")
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        input("\nPresiona Enter para continuar...")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Cancelado por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Error fatal: {e}")
        import traceback
        traceback.print_exc()
        input("\nPresiona Enter para salir...")
        sys.exit(1)