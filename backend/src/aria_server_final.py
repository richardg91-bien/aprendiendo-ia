#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ARIA - Servidor Final Solucionado
Versi√≥n definitiva que funciona sin problemas
"""

import sys
import os
import signal
from pathlib import Path

# Configurar codificaci√≥n UTF-8 para Windows
if sys.platform.startswith('win'):
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())

try:
    from flask import Flask, jsonify, request, render_template_string
    from flask_cors import CORS
    from datetime import datetime
    import random
    import threading
    import time
except ImportError as e:
    print(f"‚ùå Error importando dependencias: {e}")
    print("üí° Instalar con: pip install flask flask-cors")
    sys.exit(1)

# Crear aplicaci√≥n Flask
app = Flask(__name__)
CORS(app)

# Estado global de ARIA
aria_state = {
    "start_time": datetime.now(),
    "knowledge_base": {
        "python": "Lenguaje de programaci√≥n vers√°til y potente",
        "ia": "Inteligencia Artificial - capacidad de las m√°quinas de simular el pensamiento humano",
        "flask": "Framework web ligero para Python",
        "aria": "Asistente de IA futurista con capacidades de aprendizaje",
        "json": "Formato de intercambio de datos ligero y legible",
        "api": "Interfaz de Programaci√≥n de Aplicaciones"
    },
    "conversation_history": [],
    "total_interactions": 0,
    "learning_sessions": 0,
    "status": "active"
}

# HTML simple para la p√°gina principal
HOME_HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>ü§ñ ARIA - Asistente IA</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; background: #f0f0f0; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; }
        .status { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .endpoint { background: #f8f9fa; padding: 10px; margin: 10px 0; border-left: 4px solid #007bff; }
        .code { font-family: monospace; background: #f1f1f1; padding: 5px; border-radius: 3px; }
        .test-btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        .test-btn:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ ARIA - Asistente IA Futurista</h1>
        
        <div class="status">
            <h3>‚úÖ Estado del Servidor</h3>
            <p><strong>Estado:</strong> Funcionando correctamente</p>
            <p><strong>Iniciado:</strong> {{ start_time }}</p>
            <p><strong>Conocimiento:</strong> {{ knowledge_count }} conceptos</p>
            <p><strong>Conversaciones:</strong> {{ conversation_count }}</p>
        </div>
        
        <h3>üîó Endpoints Disponibles</h3>
        
        <div class="endpoint">
            <strong>GET /api/status</strong> - Estado del sistema<br>
            <button class="test-btn" onclick="testEndpoint('/api/status')">Probar</button>
        </div>
        
        <div class="endpoint">
            <strong>POST /api/chat</strong> - Chat con ARIA<br>
            <span class="code">{"message": "Hola ARIA"}</span><br>
            <button class="test-btn" onclick="testChat()">Probar Chat</button>
        </div>
        
        <div class="endpoint">
            <strong>GET /api/knowledge</strong> - Ver base de conocimiento<br>
            <button class="test-btn" onclick="testEndpoint('/api/knowledge')">Probar</button>
        </div>
        
        <div class="endpoint">
            <strong>GET /api/history</strong> - Historial de conversaciones<br>
            <button class="test-btn" onclick="testEndpoint('/api/history')">Probar</button>
        </div>
        
        <div id="result" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; display: none;">
            <h4>Resultado:</h4>
            <pre id="result-content"></pre>
        </div>
    </div>
    
    <script>
        function testEndpoint(endpoint) {
            fetch(endpoint)
                .then(response => response.json())
                .then(data => showResult(JSON.stringify(data, null, 2)))
                .catch(error => showResult('Error: ' + error));
        }
        
        function testChat() {
            fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: 'Hola ARIA, ¬øc√≥mo est√°s?' })
            })
            .then(response => response.json())
            .then(data => showResult(JSON.stringify(data, null, 2)))
            .catch(error => showResult('Error: ' + error));
        }
        
        function showResult(content) {
            document.getElementById('result').style.display = 'block';
            document.getElementById('result-content').textContent = content;
        }
    </script>
</body>
</html>
"""

@app.route('/')
def home():
    """P√°gina principal con interfaz web"""
    return render_template_string(HOME_HTML,
        start_time=aria_state["start_time"].strftime("%Y-%m-%d %H:%M:%S"),
        knowledge_count=len(aria_state["knowledge_base"]),
        conversation_count=len(aria_state["conversation_history"])
    )

@app.route('/api/status')
def api_status():
    """Estado del sistema"""
    uptime = datetime.now() - aria_state["start_time"]
    
    return jsonify({
        "status": "running",
        "mode": "stable",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat(),
        "uptime_seconds": int(uptime.total_seconds()),
        "uptime_formatted": str(uptime).split('.')[0],
        "components": {
            "flask": True,
            "cors": True,
            "neural_network": False,
            "voice_system": False,
            "simple_ai": True
        },
        "stats": {
            "total_knowledge": len(aria_state["knowledge_base"]),
            "total_conversations": len(aria_state["conversation_history"]),
            "total_interactions": aria_state["total_interactions"]
        }
    })

@app.route('/api/chat', methods=['POST'])
def api_chat():
    """Chat con ARIA"""
    try:
        data = request.get_json()
        
        if not data or 'message' not in data:
            return jsonify({"error": "Se requiere un 'message' en el JSON"}), 400
            
        user_message = data['message'].strip()
        
        if not user_message:
            return jsonify({"error": "El mensaje no puede estar vac√≠o"}), 400
        
        # Procesar mensaje
        response = process_message(user_message)
        
        # Guardar conversaci√≥n
        conversation = {
            "id": len(aria_state["conversation_history"]) + 1,
            "user": user_message,
            "aria": response,
            "timestamp": datetime.now().isoformat()
        }
        
        aria_state["conversation_history"].append(conversation)
        aria_state["total_interactions"] += 1
        
        # Aprender de la conversaci√≥n
        learn_from_message(user_message)
        
        return jsonify({
            "response": response,
            "conversation_id": conversation["id"],
            "timestamp": conversation["timestamp"],
            "knowledge_count": len(aria_state["knowledge_base"]),
            "total_conversations": len(aria_state["conversation_history"])
        })
        
    except Exception as e:
        return jsonify({"error": f"Error procesando mensaje: {str(e)}"}), 500

@app.route('/api/knowledge')
def api_knowledge():
    """Base de conocimiento"""
    return jsonify({
        "total_concepts": len(aria_state["knowledge_base"]),
        "knowledge_base": aria_state["knowledge_base"],
        "last_updated": datetime.now().isoformat(),
        "learning_active": True
    })

@app.route('/api/history')
def api_history():
    """Historial de conversaciones"""
    limit = request.args.get('limit', 10, type=int)
    recent = aria_state["conversation_history"][-limit:] if limit > 0 else aria_state["conversation_history"]
    
    return jsonify({
        "conversations": recent,
        "total_count": len(aria_state["conversation_history"]),
        "showing": len(recent),
        "oldest_conversation": aria_state["conversation_history"][0]["timestamp"] if aria_state["conversation_history"] else None
    })

@app.route('/api/learn', methods=['POST'])
def api_learn():
    """Ense√±ar nuevo conocimiento a ARIA"""
    try:
        data = request.get_json()
        
        if not data or 'concept' not in data or 'description' not in data:
            return jsonify({"error": "Se requieren 'concept' y 'description'"}), 400
        
        concept = data['concept'].lower().strip()
        description = data['description'].strip()
        
        if concept in aria_state["knowledge_base"]:
            old_description = aria_state["knowledge_base"][concept]
            aria_state["knowledge_base"][concept] = description
            message = f"Conocimiento actualizado sobre '{concept}'"
        else:
            aria_state["knowledge_base"][concept] = description
            message = f"Nuevo conocimiento aprendido sobre '{concept}'"
        
        aria_state["learning_sessions"] += 1
        
        return jsonify({
            "message": message,
            "concept": concept,
            "description": description,
            "total_knowledge": len(aria_state["knowledge_base"]),
            "learning_sessions": aria_state["learning_sessions"]
        })
        
    except Exception as e:
        return jsonify({"error": f"Error aprendiendo: {str(e)}"}), 500

def process_message(message):
    """Procesa mensajes y genera respuestas inteligentes"""
    message_lower = message.lower()
    
    # Saludos
    if any(word in message_lower for word in ["hola", "buenos", "buenas", "hey", "hi", "saludos"]):
        responses = [
            "¬°Hola! Soy ARIA, tu asistente de IA. Es un placer hablar contigo. ¬øEn qu√© puedo ayudarte?",
            "¬°Saludos! Soy ARIA y estoy aqu√≠ para asistirte en lo que necesites. ¬øQu√© te gustar√≠a explorar?",
            "¬°Hola! Me alegra verte por aqu√≠. Soy ARIA, tu asistente de inteligencia artificial. ¬øC√≥mo puedo ayudarte hoy?"
        ]
        return random.choice(responses)
    
    # Preguntas sobre aprendizaje
    elif any(phrase in message_lower for phrase in ["qu√© has aprendido", "que has aprendido", "conocimiento", "sabes"]):
        knowledge_count = len(aria_state["knowledge_base"])
        conversation_count = len(aria_state["conversation_history"])
        
        topics = list(aria_state["knowledge_base"].keys())
        sample_topics = random.sample(topics, min(4, len(topics)))
        
        return f"""He adquirido {knowledge_count} conceptos en mi base de conocimiento a trav√©s de {conversation_count} conversaciones.

Algunos temas que domino: {', '.join(sample_topics)}.

Mi conocimiento crece con cada interacci√≥n. Puedo aprender sobre nuevos temas si me los ense√±as. ¬øHay algo espec√≠fico que te gustar√≠a que aprenda o sobre lo que quieras conversar?"""
    
    # Estado y funcionamiento
    elif any(word in message_lower for word in ["c√≥mo est√°s", "como estas", "estado", "funcionas"]):
        uptime = datetime.now() - aria_state["start_time"]
        return f"""¬°Estoy funcionando perfectamente! 

üìä Mi estado actual:
‚Ä¢ Activo desde: {aria_state['start_time'].strftime('%H:%M:%S')}
‚Ä¢ Tiempo en l√≠nea: {str(uptime).split('.')[0]}
‚Ä¢ Conversaciones procesadas: {len(aria_state['conversation_history'])}
‚Ä¢ Conocimiento acumulado: {len(aria_state['knowledge_base'])} conceptos
‚Ä¢ Interacciones totales: {aria_state['total_interactions']}

Todos mis sistemas est√°n operativos y listo para ayudarte."""
    
    # Despedidas
    elif any(word in message_lower for word in ["adi√≥s", "adios", "chao", "bye", "hasta luego", "nos vemos"]):
        responses = [
            "¬°Hasta luego! Ha sido un placer conversar contigo. Espero verte pronto. üëã",
            "¬°Que tengas un excelente d√≠a! Estar√© aqu√≠ cuando necesites ayuda. üåü",
            "¬°Nos vemos! Gracias por esta conversaci√≥n tan interesante. üòä"
        ]
        return random.choice(responses)
    
    # Ayuda y funciones
    elif any(word in message_lower for word in ["ayuda", "help", "qu√© puedes hacer", "que puedes hacer", "funciones"]):
        return """¬°Por supuesto! Soy ARIA y estas son mis capacidades:

ü§ñ **Conversaci√≥n Natural**: Mantengo di√°logos fluidos y contextuales
üìö **Aprendizaje Continuo**: Aprendo de cada interacci√≥n y actualizo mi conocimiento
üí° **Respuestas Inteligentes**: Analizo tu mensaje para dar respuestas relevantes
üß† **Base de Conocimiento**: Tengo informaci√≥n sobre m√∫ltiples temas
üìä **Estad√≠sticas**: Puedo contarte sobre mi funcionamiento y m√©tricas
üîç **An√°lisis**: Puedo ayudarte a explorar conceptos y ideas

¬øHay algo espec√≠fico en lo que te gustar√≠a que te ayude?"""
    
    # Preguntas sobre IA
    elif any(phrase in message_lower for phrase in ["inteligencia artificial", "ia", "ai", "machine learning", "eres real"]):
        return """La Inteligencia Artificial es un campo fascinante que explora c√≥mo las m√°quinas pueden simular aspectos del pensamiento humano.

üß† **Sobre m√≠**: Soy un ejemplo de IA conversacional. Uso algoritmos para:
‚Ä¢ Entender lenguaje natural
‚Ä¢ Generar respuestas contextualmente apropiadas
‚Ä¢ Aprender de nuestras interacciones
‚Ä¢ Mantener una base de conocimiento actualizada

üî¨ **La IA incluye**: Machine Learning, procesamiento de lenguaje natural, reconocimiento de patrones, y mucho m√°s.

¬øTe interesa alg√∫n aspecto espec√≠fico de la IA que te gustar√≠a explorar?"""
    
    # Preguntas t√©cnicas
    elif any(word in message_lower for word in ["programaci√≥n", "python", "c√≥digo", "desarrollo"]):
        return """¬°La programaci√≥n es uno de mis temas favoritos!

üêç **Python** es especialmente vers√°til: excelente para IA, desarrollo web, an√°lisis de datos, automatizaci√≥n...

üíª **Desarrollo** abarca desde algoritmos b√°sicos hasta sistemas complejos distribuidos.

Mi propia existencia depende de c√≥digo Python usando Flask para la API web. ¬øHay alg√∫n aspecto de programaci√≥n espec√≠fico que te interese? ¬øEst√°s trabajando en alg√∫n proyecto?"""
    
    # Respuestas para preguntas
    elif "?" in message:
        question_responses = [
            "Excelente pregunta. Bas√°ndome en mi conocimiento actual...",
            "Interesante tema para explorar. Mi an√°lisis sugiere...",
            "Me gusta c√≥mo piensas. Seg√∫n lo que entiendo...",
            "Esa pregunta toca un punto importante. Considero que..."
        ]
        base = random.choice(question_responses)
        
        # Contexto espec√≠fico por palabras clave
        if any(word in message_lower for word in ["c√≥mo", "como", "por qu√©", "porque"]):
            return base + " Las razones y mecanismos detr√°s de este tema son complejos. ¬øPodr√≠as ser m√°s espec√≠fico para darte una respuesta m√°s detallada?"
        elif any(word in message_lower for word in ["cu√°ndo", "cuando", "tiempo"]):
            return base + " El factor temporal es importante aqu√≠. ¬øTe refieres a un momento espec√≠fico o a una duraci√≥n?"
        else:
            return base + " Es un tema que requiere an√°lisis detallado. ¬øHay alg√∫n aspecto particular que te interese m√°s?"
    
    # Aprendizaje de conceptos nuevos
    elif any(word in message_lower for word in ["es", "significa", "define", "explica"]):
        words = message.split()
        new_concepts = []
        for word in words:
            clean_word = word.lower().strip('.,!?').replace('"', '').replace("'", "")
            if len(clean_word) > 3 and clean_word not in aria_state["knowledge_base"] and clean_word.isalpha():
                aria_state["knowledge_base"][clean_word] = f"Concepto mencionado en: '{message[:60]}...'"
                new_concepts.append(clean_word)
        
        if new_concepts:
            return f"Interesante. He incorporado {len(new_concepts)} nuevos conceptos a mi base de conocimiento: {', '.join(new_concepts)}. ¬øPodr√≠as contarme m√°s detalles sobre alguno de ellos?"
        else:
            return "Entiendo. ¬øPuedes proporcionar m√°s contexto o detalles sobre lo que mencionas?"
    
    # Respuestas por defecto inteligentes
    else:
        default_responses = [
            "Comprendo tu punto. ¬øPodr√≠as elaborar un poco m√°s para darte una respuesta m√°s espec√≠fica?",
            "Interesante perspectiva. Me gustar√≠a conocer m√°s detalles sobre lo que piensas.",
            "Eso suena fascinante. ¬øHay alg√∫n aspecto particular que quisieras explorar?",
            "Entiendo. ¬øEn qu√© m√°s puedo ayudarte o qu√© otras cosas te gustar√≠a discutir?",
            "Me parece un tema valioso para conversar. ¬øQu√© m√°s puedes contarme al respecto?",
            "D√©jame procesar esa informaci√≥n... ¬øPodr√≠as darme m√°s contexto?",
            "Es una observaci√≥n interesante. ¬øC√≥mo llegaste a esa conclusi√≥n?"
        ]
        return random.choice(default_responses)

def learn_from_message(message):
    """Aprende conceptos simples de los mensajes"""
    words = message.lower().split()
    
    # Buscar palabras t√©cnicas o conceptos nuevos
    for word in words:
        clean_word = word.strip('.,!?()[]{}').replace('"', '').replace("'", "")
        
        # Agregar palabras t√©cnicas importantes
        if (len(clean_word) > 4 and 
            clean_word.isalpha() and 
            clean_word not in aria_state["knowledge_base"] and
            any(tech in clean_word for tech in ['tech', 'system', 'data', 'code', 'program', 'algorithm', 'network'])):
            
            aria_state["knowledge_base"][clean_word] = f"T√©rmino t√©cnico mencionado en conversaci√≥n"

def handle_shutdown(signum, frame):
    """Maneja el cierre del servidor"""
    print(f"\n\nüëã Recibida se√±al de cierre ({signum})")
    print("üìä Estad√≠sticas finales de ARIA:")
    print(f"   ‚è±Ô∏è Tiempo activo: {datetime.now() - aria_state['start_time']}")
    print(f"   üí¨ Conversaciones: {len(aria_state['conversation_history'])}")
    print(f"   üß† Conocimiento: {len(aria_state['knowledge_base'])} conceptos")
    print(f"   üîÑ Interacciones: {aria_state['total_interactions']}")
    print("üéØ ARIA se despide. ¬°Hasta la pr√≥xima!")
    sys.exit(0)

# Configurar manejo de se√±ales
signal.signal(signal.SIGINT, handle_shutdown)
signal.signal(signal.SIGTERM, handle_shutdown)

def start_server():
    """Inicia el servidor ARIA"""
    print("\n" + "="*70)
    print("ü§ñ ARIA - ASISTENTE IA FUTURISTA")
    print("="*70)
    print("üåü Versi√≥n: 1.0.0 Estable")
    print("üöÄ Estado: Completamente Funcional")
    print("üß† Inteligencia: Sistema de respuestas avanzado")
    print("üìö Aprendizaje: Activo y continuo")
    print("üåê Interfaz: Web + API REST")
    print("üîí Seguridad: Sin dependencias problem√°ticas")
    print("\nüåê Accesos:")
    print("   Interfaz Web: http://localhost:8000")
    print("   API REST:     http://localhost:8000/api/")
    print("   Estado:       http://localhost:8000/api/status")
    print("   Chat:         POST http://localhost:8000/api/chat")
    print("\nüìä Estado inicial:")
    print(f"   üß† Conocimiento: {len(aria_state['knowledge_base'])} conceptos")
    print(f"   ‚è∞ Iniciado: {aria_state['start_time'].strftime('%Y-%m-%d %H:%M:%S')}")
    print("\n‚èπÔ∏è Usa Ctrl+C para detener el servidor")
    print("="*70)
    
    try:
        app.run(
            host='0.0.0.0',
            port=8000,
            debug=False,
            threaded=True,
            use_reloader=False
        )
    except KeyboardInterrupt:
        handle_shutdown(signal.SIGINT, None)
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico del servidor: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    start_server()